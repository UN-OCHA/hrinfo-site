<?php

/**
 * @file
 * Code for the Users feature.
 */

include_once 'hr_users.features.inc';

/**
 * Implements hook_menu().
 */
function hr_users_menu() {
  $items['login'] = array(
    'title' => 'Log in',
    'page callback' => 'hr_users_login_redirect',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function hr_users_menu_alter(&$items) {
  // Disable the user registration page for all users.
  $items['user/register']['access callback'] = FALSE;
  $items['user/password']['page callback'] = FALSE;
  $items['user/login']['access callback'] = FALSE;
  if (isset($items['masquerade/unswitch'])) {
    $items['masquerade/unswitch']['menu_name'] = 'user-menu';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_users_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $form['name']['#access'] = FALSE;
  $form['pass']['#access'] = FALSE;
  $form['actions']['#access'] = FALSE;
  $form['links']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_users_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['name']['#access'] = FALSE;
  $form['pass']['#access'] = FALSE;
  $form['actions']['#access'] = FALSE;
  $form['links']['#access'] = FALSE;
}

/**
 * Redirect to hybrid auth.
 */
function hr_users_login_redirect() {
  // Make sure user is logged out.
  if (user_is_logged_in()) {
    module_load_include('pages.inc', 'user');
    user_logout_current_user();
  }
  if (isset($_GET['hid_redirect'])) {
    drupal_session_start();
    $_SESSION['hid_redirect'] = $_GET['hid_redirect'];
  }
  drupal_goto('hybridauth/window/HumanitarianId');
}

/**
 * Implements hook_hybridauth_destination_options_alter().
 */
function hr_users_hybridauth_destination_options_alter(&$destination_options) {
  if (isset($_SESSION['hid_redirect'])) {
    $destination_options['path'] = $_SESSION['hid_redirect'];
    unset($_SESSION['hid_redirect']);
  }
  else {
    $destination_options['path'] = 'home';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function hr_users_field_formatter_info() {
  return array(
    'hr_users_skype' => array(
      'label' => t('Skype Status'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function hr_users_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'hr_users_skype':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $status = file_get_contents('http://mystatus.skype.com/' . $item['safe_value'] . '.num');
        $class = '';
        if ($status == 2) {
          $class = 'skype-online';
        }
        $element[$delta] = array('#markup' => '<a href="skype:' . $item['safe_value'] . '?call"><i class="fa fa-skype fa-2x ' . $class . '"></i></a>');
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_og_features_registry()
 */
function hr_users_og_features_registry() {
  $registry = array();
  $feature = new stdClass();
  $feature->id = 'hr_users';
  $feature->name = 'People';
  $feature->description = t('Show members of your space.');
  $feature->components = array(
    'pane' => array(
      'hr_users-space_members',
    ),
  );
  $registry[$feature->id] = $feature;
  return $registry;
}

/**
 * Implements hook_hybridauth_user_login().
 */
function hr_users_hybridauth_user_login($account, $data) {
  $profile = profile2_load_by_user($account, 'main');
  if (empty($profile)) {
    $profile_type = profile2_get_types('main');
    $profile = profile2_create(array('user' => $account, 'type' => $profile_type));
  }
  if (!empty($data) && $profile) {
    $changed = FALSE;

    if (empty($profile->field_first_name[LANGUAGE_NONE][0]['value']) || $profile->field_first_name[LANGUAGE_NONE][0]['value'] != $data['given_name']) {
      $profile->field_first_name[LANGUAGE_NONE][0]['value'] = $data['firstName'];
      $changed = TRUE;
    }
    if (empty($profile->field_last_name[LANGUAGE_NONE][0]['value']) || $profile->field_last_name[LANGUAGE_NONE][0]['value'] != $data['family_name']) {
      $profile->field_last_name[LANGUAGE_NONE][0]['value'] = $data['lastName'];
      $changed = TRUE;
    }

    if (empty($profile->field_job_title_other[LANGUAGE_NONE][0]['value']) || $profile->field_job_title_other[LANGUAGE_NONE][0]['value'] != $data['job_title']) {
      $profile->field_job_title_other[LANGUAGE_NONE][0]['value'] = $data['job_title'];
      $changed = TRUE;
    }

    if ($changed) {
      $profile->save();
      user_save($account);
    }

    $changed = FALSE;
    // Update email if needed.
    if ($account->mail != $data['email']) {
      $account->mail = $data['email'];
      $changed = TRUE;
    }

    // Update username to match email.
    if ($account->name != $data['email']) {
      $account->name = $data['email'];
      $changed = TRUE;
    }

    if ($changed) {
      user_save($account);
    }
  }

  // Check if the user's profile is complete. If not, set a session variable to
  // enforce that the user complete the profile.
  hr_users_check_profile();
}

/**
 * Helper function.
 *
 * Load the current user's main profile and ensure the
 * required fields have been filled in.
 */
function hr_users_check_profile($redirect = NULL) {
  global $user;

  // Commented this code out temporarily until we figure out what's wrong.
  $profile = profile2_load_by_user($user, 'main');
  if (empty($profile) || empty($profile->field_first_name[LANGUAGE_NONE][0]['value']) || empty($profile->field_last_name[LANGUAGE_NONE][0]['value']) || empty($profile->field_organizations[LANGUAGE_NONE][0]['target_id'])) {
    $_SESSION['hr_users_require_profile'] = 1;

    $profile_path = 'user/' . $user->uid . '/edit/main';
    $allowed_paths = array(
      $profile_path,
      'user/logout'
    );
    if ($redirect && !in_array($_GET['q'], $allowed_paths)) {
      drupal_set_message('Please complete your profile before using other site features.');
      drupal_goto($profile_path);
    }
  }
  else {
    unset($_SESSION['hr_users_require_profile']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_users_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['mail']['#title'] = t('Login e-mail');
  $form['account']['mail']['#description'] = t('The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail. To change your login address, please contact our support team: <a href="@mailto">info@humanitarianresponse.info</a>.', array('@mailto' => 'mailto:info@humanitarianresponse.info'));
  // Only change the standard "account" user page.
  if (!empty($form['#user_category']) && $form['#user_category'] !== 'account') {
    return;
  }

  // Check if the user has a Connector module account.
  $uid = !empty($form['#user']->uid) ? $form['#user']->uid : FALSE;
  $authname = $uid ? db_query("SELECT authname FROM {authmap} WHERE module = 'connector' AND uid = :uid", array(':uid' => $uid))->fetchField() : FALSE;
  if ($authname) {
    // Make the email field readonly.
    $form['account']['mail']['#disabled'] = TRUE;
    $form['account']['mail']['#weight'] = -4;

    // Hide and disable the username field.
    $form['account']['name']['#type'] = 'value';

    // Hide and disable password fields.
    $form['account']['current_pass']['#type'] = 'value';
    $form['account']['pass']['#type'] = 'value';
  }
}

/**
 * Implements hook_action_info().
 */
function hr_users_action_info() {
  return array(
    'hr_users_remove_og_roles' => array(
      'type' => 'user',
      'label' => t('Remove OG roles from user'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Remove roles.
 */
function hr_users_remove_og_roles(&$account, $context) {
  $mids = array();
  $groups = og_get_groups_by_user($account);
  if ($groups) {
    foreach ($groups as $group_type => $gids) {
      foreach ($gids as $gid) {
        // Load membership.
        $membership = og_get_membership($group_type, $gid, 'user', $account->uid);
        if ($membership) {
          $mids[$membership->id] = $membership->id;
        }
      }
    }
  }

  // Remove stale records in the {og_users_roles} table.
  db_delete('og_users_roles')
    ->condition('uid', $account->uid)
    ->execute();

  // Remove all roles from user.
  $account->roles = array(
    '2' => 'authenticated user',
  );

  if (!empty($mids)) {
    og_membership_delete_multiple($mids);
  }
}
