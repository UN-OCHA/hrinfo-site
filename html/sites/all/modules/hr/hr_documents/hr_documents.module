<?php

/**
 * @file
 * Code for the Documents feature.
 */

include_once 'hr_documents.features.inc';

/**
 * Implements hook_og_features_registry().
 */
function hr_documents_og_features_registry() {
  $registry = array();
  $feature = new stdClass();
  $feature->id = 'hr_documents';
  $feature->name = 'Documents';
  $feature->description = t('Provide documents to your space.');
  $feature->components = array(
    'node' => array(
      'hr_document',
    ),
  );
  $registry[$feature->id] = $feature;
  return $registry;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_documents_form_hr_document_node_form_alter(&$form, &$form_state) {
  hr_sectors_hide_sectors($form, $form_state);
  hr_core_prepare_node_clone_form($form, $form_state);

  // These details aren't necessary for offices.
  unset($form['additional_settings']);
  unset($form['author']);
  unset($form['options']);
  unset($form['redirect']);
  unset($form['revision_information']);
  $form['field_sectors']['#access'] = FALSE;
  $form['group_content_access']['#access'] = FALSE;

  // To alter changes not yet made.
  if (!isset($form['#after_build'])) {
    $form['#after_build'] = array();
  }
  $form['#after_build'][] = 'hr_documents_form_alter_after_build';

  // Attach js to toggle additional fields.
  $form['#attached']['js'][] = drupal_get_path('module', 'hr_core') . '/js/hr_core_toggle_fields.js';
}

/**
 * Make sure title is changed in cloned node.
 */
function _hr_documents_check_clone_title($form, &$form_state) {
  if (isset($form_state['values']['title_field'][$form_state['node']->language][0]['value'])) {
    if (strpos($form_state['values']['title_field'][$form_state['node']->language][0]['value'], '[CLONED]') !== FALSE) {
      $types = node_type_get_types();
      form_set_error('title_field', t('Please adjust the title before saving this @name', array('@name' => $types[$form_state['node']->type]->name)));
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function hr_documents_entity_info_alter(&$entity_info) {
  $entity_info['fieldable_panels_pane']['bundles']['hr_documents'] = array(
    'label' => t('Documents'),
    'pane category' => t('Documents'),
    'pane top level' => TRUE,
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/hr-documents',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_search_api_views_query_alter().
 *
 * Makes the documents view available for disasters.
 */
function hr_documents_search_api_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_documents') {
    $params = drupal_get_query_parameters($_GET, array(
      'q',
      'page',
    ));
    $existing = $query->getSort();
    if (empty($existing) && !isset($params['sort']) && !isset($params['order'])) {
      // Sort by publication date.
      $query->sort('field_publication_date', 'desc');
    }
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (reset($condition) == 'og_group_ref') {
          $nid = $condition[1];
          if (is_numeric($nid)) {
            $node = node_load($nid);
            if ($node->type == 'hr_disaster') {
              $condition = array('field_disasters', $nid, '=');
            }
            // Clusters as spaces
            // See http://atrium.humanitarianresponse.info/humanitarian_response/node/4363
            elseif ($node->type == 'hr_bundle') {
              $condition = array('field_bundles', $nid, '=');
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function hr_documents_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function hr_documents_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#options']) && $element['#field_name'] == 'field_document_type') {
    foreach ($element['#options'] as $tid => &$option) {
      if (is_numeric($tid)) {
        $option_label = array();
        $parents = taxonomy_get_parents_all($tid);
        foreach ($parents as $parent) {
          array_unshift($option_label, entity_label('taxonomy_term', $parent));
        }
        $option = implode(' > ', $option_label);
      }
    }
    asort($element['#options']);
  }
}

/**
 * Implements hook_clone_node_alter().
 */
function hr_documents_clone_node_alter(&$node, $context) {
  if ($node->type != 'hr_document') {
    return;
  }

  // Mark title field as clone.
  if (isset($node->title_field[$node->language][0]['value'])) {
    $node->title_field[$node->language][0]['value'] .= ' [CLONED]';
    $node->title_field[$node->language][0]['safe_value'] .= ' [CLONED]';
  }

  unset($node->field_files_collection);
  unset($node->field_publication_date);
  unset($node->body);
  unset($node->field_related_content);
}

/**
 * Implements hook_clone_access_alter().
 */
function hr_documents_clone_access_alter(&$access, $node) {
  $allowed_types = array(
    'hr_assessment',
    'hr_document',
    'hr_infographic',
    'hr_event',
  );

  if (in_array($node->type, $allowed_types)) {
    $access = node_access('update', $node);
  }
  else {
    // Deny access for other content types.
    $access = FALSE;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function hr_documents_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'clone_access_alter') {
    return;
  }

  // Move our alter to the end.
  $module = 'hr_documents';
  $my_alter = array($module => $implementations[$module]);
  unset($implementations[$module]);
  $implementations = $implementations + $my_alter;
}

/**
 * After_build hook added in hr_documents_form_hr_document_node_form_alter().
 */
function hr_documents_form_alter_after_build($form, &$form_state) {
  // Hide wysiwyg (and other text format) options.
  $language = $form['body']['#language'];
  $form['body'][$language][0]['format']['#access'] = FALSE;
  // Remove the path settings for node form.
  unset($form['path']);

  return $form;
}
