<?php

/**
 * @file
 * Code for the Events feature.
 */

include_once 'hr_events.features.inc';

/**
 * Implements hook_og_features_registry()
 */
function hr_events_og_features_registry() {
  $registry = array();
  $feature = new stdClass();
  $feature->id = 'hr_events';
  $feature->name = 'Events';
  $feature->description = t('Provide events to your space.');
  $feature->components = array(
    'node' => array(
      'hr_event',
    ),
  );
  $registry[$feature->id] = $feature;
  return $registry;
}

/**
 * Implements hook_views_query_alter()
 *
 * Makes the clusters/sectors filter of the calendar work
 * Makes the calendar view available to disasters
 * Related issue: https://www.drupal.org/node/2291619
 */
function hr_events_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_events_calendar') {
    $add_join = FALSE;
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Makes the calendar view available to disasters.
        if ($condition['field'] == 'og_membership.gid = :og_membership_og_group_ref_target_id2 ' && $condition['operator'] == 'formula') {
          $nid = $condition['value'][':og_membership_og_group_ref_target_id2'];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $join = new views_join();
            $join->construct('field_data_field_disasters',
              'node',
              'nid',
              'entity_id'
            );
            $view->query->add_relationship('field_data_field_disasters', $join, 'node');
            $condition = array(
              'field' => 'field_data_field_disasters.field_disasters_target_id',
              'value' => $nid,
              'operator' => '='
            );
          }
        }
        // If we are filtering the calendar by cluster/sector.
        if ($condition['field'] == 'og_membership.gid' && $condition['operator'] == 'in') {
          $condition['field'] = 'og_membership2.gid';
          $add_join = TRUE;
        }
      }
    }
    // Then add a join to og_membership to the query.
    if ($add_join) {
      $join = new views_join();
      $join->construct('og_membership',
      // Left table.
          'node',
      // Left field.
          'nid',
      // field.
          'etid'
      );
      $view->query->add_relationship('og_membership2', $join, 'node');
    }
  }
}

/**
 * Implements hook_search_api_views_query_alter().
 *
 * Makes the events view available for disasters.
 */
function hr_events_search_api_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_events') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (reset($condition) == 'og_group_ref') {
          $nid = $condition[1];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $condition = array('field_disasters', $nid, '=');
          }
          // Clusters as spaces
          // See http://atrium.humanitarianresponse.info/humanitarian_response/node/4363
          elseif ($node->type == 'hr_bundle') {
            $condition = array('field_bundles', $nid, '=');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function hr_events_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds PDF button to export events as PDF
 * See http://atrium.humanitarianresponse.info/humanitarian_response/node/4466
 */
function hr_events_views_pre_render(&$view) {
  if ($view->name == 'hr_events_calendar' && ($view->current_display == 'master' || $view->current_display == 'week' || $view->current_display == 'day')) {
    $params = array();
    foreach ($_GET as $key => $param) {
      if ($key != 'q') {
        $params[$key] = $param;
      }
    }
    $link = url(str_replace('/events', '/events/xyzzy-pdf', current_path()), array(
      'attributes' => array(
        'target' => 'about:blank',
        'data-pdf-link' => 'yes',
      ),
      'query' => $params,
    ));
    $view->feed_icon .= '<li><button data-target="' . $link . '">' . t('PDF') . '</button></li>';
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Shows the selected filters in the print display for PDF output.
 */
function hr_events_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'hr_events_calendar' && ($display_id == 'print_master' || $display_id == 'print_week' || $display_id == 'print_day')) {
    $entity_types = array(
      'field_coordination_hubs_target_id_entityreference_filter' => 'node',
      'field_location_target_id_entityreference_filter' => 'taxonomy_term',
      'field_bundles_target_id_entityreference_filter' => 'node',
      'field_event_category_target_id_entityreference_filter' => 'taxonomy_term',
    );
    $header = '%2';
    $filters = $view->display_handler->get_option('filters');
    $i = 0;
    foreach ($filters as $key => $filter) {
      if (isset($filter['exposed']) && $filter['exposed'] == TRUE && isset($_GET[$key]) && $_GET[$key] != 'All') {
        if ($i == 0) {
          $header .= '<div class="filters">' . t('Filter criteria');
        }
        $entity = entity_load_single($entity_types[$key], $_GET[$key]);
        if (empty($entity)) {
          continue;
        }
        $header .= '<span class="filter">' . entity_label($entity_types[$key], $entity) . '</span>';
        $i++;
      }
    }
    if ($i > 0) {
      $header .= '</div>';
    }
    $view->set_item_option($display_id, 'header', 'area', 'content', $header);
  }
}

/**
 * Implements hook_menu().
 *
 * Defines the menu callbacks necessary to print the events in PDF format
 * See http://atrium.humanitarianresponse.info/humanitarian_response/node/4466
 */
function hr_events_menu() {
  $items['node/%/events/pdf'] = array(
    'page callback' => 'hr_events_pdf_output',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Output an event as PDF.
 */
function hr_events_pdf_output($nid) {
  $current_params = array();
  foreach ($_GET as $key => $param) {
    if ($key != 'q') {
      $current_params[$key] = $param;
    }
  }

  $path = current_path();
  $node = entity_load_single('node', $nid);
  $label = entity_label('node', $node);
  $label = transliteration_clean_filename($label);
  $html_path = str_replace('/pdf', '/print', $path);
  // Determine period.
  $period = 'month';
  if (strpos($path, 'week') !== FALSE) {
    $period = 'week';
  }
  elseif (strpos($path, 'day') !== FALSE) {
    $period = 'day';
  }
  $period = t($period);
  // Determine date.
  $date = date('Y-m');
  $date_pos = strpos($path, '/20');
  if ($date_pos !== FALSE) {
    $date_part = substr($path, $date_pos + 1);
    $date_parts = explode('/', $date_part);
    $date = $date_parts[0];
  }
  else {
    if ($period == 'week' || $period == 'day') {
      $date = date('Y-m-d');
    }
  }

  // Print PDF using Snap service
  // .
  // @see https://github.com/UN-OCHA/tools-snap-service
  $html_url = url($html_path, array('absolute' => TRUE, 'query' => $current_params));

  // Since Drupal's string translations are set up with this existing string, we
  // allow localization to occur first before doing string substitution to work
  // with the Snap Service.
  $pdf_pagination = t('Page [page] of [topage]');
  $pdf_pagination = str_replace('[page]', '<span class="pageNumber"></span>', $pdf_pagination);
  $pdf_pagination = str_replace('[topage]', '<span class="totalPages"></span>', $pdf_pagination);

  // PDF Footer message.
  $pdf_date = date('j M Y', time());
  $pdf_message = t('Powered by HUMANITARIAN RESPONSE. Date of creation: [date]');
  $pdf_message = str_replace('[date]', $pdf_date, $pdf_message);

  // Construct our PDF footer.
  //
  // Note: you CANNOT use remote references such as image URLs or stylesheets,
  // nor can JS be executed in this context. Inline HTML/CSS only!
  $pdf_footer = <<<PDF_FOOTER
<footer class="pdf-footer">
  <div class="pdf-footer__left">
    $pdf_pagination
  </div>
  <div class="pdf-footer__right">
    $pdf_message<br>
    https://www.humanitarianresponse.info
  </div>
</footer>
<style type="text/css">
  *, *:before, *:after {
    box-sizing: border-box;
    -webkit-print-color-adjust: exact;
  }
  .pdf-footer {
    display: table;
    width: 213mm; /* 297mm * 0.75 - 5mm - 5mm */
    margin: 0 5mm;
    white-space: nowrap;

    font-family: Roboto, serif;
    font-weight: 400;
    font-size: 9px;
  }
  .pdf-footer__left,
  .pdf-footer__right {
    display: table-cell;
    vertical-align: bottom;
    width: 49%;
  }
  .pdf-footer__right {
    text-align: right;
  }
</style>
PDF_FOOTER;

  // Parameters can be found on Snap Service README.
  //
  // @see https://github.com/UN-OCHA/tools-snap-service#api
  $params = array(
    'service' => 'hrinfo',
    'media' => 'print',
    'output' => 'pdf',
    'pdfFormat' => 'A4',
    'pdfLandscape' => 'true',
    'pdfBackground' => 'true',
    // Suppress default by sending space character.
    'pdfHeader' => ' ',
    'pdfFooter' => $pdf_footer,
    'pdfMarginTop' => '24',
    'pdfMarginUnit' => 'px',
  );

  // Use ocha_snap to make the call to the snap service.
  $pdf = ocha_snap($html_url, $params);

  // Sorry, no PDF. Show an error.
  if (empty($pdf)) {
    return t('Unable to generate a PDF file for download.');
  }

  // Add headers to control content type and filename.
  drupal_add_http_header('Content-Type', 'application/pdf; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename="' . t('calendar') . '-' . $label . '-' . $period . '-' . $date . '.pdf"');
  echo $pdf;
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function hr_events_form_hr_event_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path('module', 'hr_events') . '/js/hr_events.js';

  // If it's a clone, validate the title.
  if (isset($form['clone_from_original_nid'])) {
    // Add title validation.
    if (!isset($form['#validate'])) {
      $form['#validate'] = array();
    }
    $form['#validate'][] = '_hr_document_check_clone_title';

    // Disable language changing.
    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
    $form['#after_build'][] = '_hr_document_clone_disable_language';
  }

  // These details aren't necessary.
  unset($form['additional_settings']);
  unset($form['author']);
  unset($form['options']);
  unset($form['redirect']);
  unset($form['revision_information']);
  $form['field_sectors']['#access'] = FALSE;
  $form['group_content_access']['#access'] = FALSE;

  // Necessary to remove path settings.
  $form['#after_build'][] = 'hr_events_form_alter_after_build';

  // Attach js to toggle additional fields.
  $form['#attached']['js'][] = drupal_get_path('module', 'hr_core') . '/js/hr_core_toggle_fields.js';
}

/**
 * Implements hook_clone_node_alter.
 */
function hr_events_clone_node_alter(&$node, $context) {
  if ($node->type != 'hr_event') {
    return;
  }

  // Mark title field as clone.
  if (isset($node->title_field[$node->language][0]['value'])) {
    $node->title_field[$node->language][0]['value'] .= ' [CLONED]';
    $node->title_field[$node->language][0]['safe_value'] .= ' [CLONED]';
  }

  unset($node->field_event_date);
  unset($node->field_event_meeting_minutes);
  unset($node->field_event_agenda);
  unset($node->field_related_content);
}

/**
 * Remove the path and menu settings for node form and hide text format options.
 *
 * Added in hr_infographics_form_hr_infographic_node_form_alter().
 */
function hr_events_form_alter_after_build($form, &$form_state) {
  $form['menu']['#access'] = FALSE;
  $language = $form['body']['#language'];
  $form['body'][$language][0]['format']['#access'] = FALSE;
  $language = $form['field_contacts_text']['#language'];
  $form['field_contacts_text'][$language][0]['format']['#access'] = FALSE;
  unset($form['path']);

  return $form;
}
