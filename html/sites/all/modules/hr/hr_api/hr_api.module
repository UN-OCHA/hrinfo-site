<?php

/**
 * @file
 * Code for the API feature.
 */

include_once 'hr_api.features.inc';

/**
 * Implements hook_entity_insert()
 */
function hr_api_entity_insert($entity, $type) {
  hr_api_entity_hook('create', $entity, $type);
}

/**
 * Implements hook_entity_update()
 */
function hr_api_entity_update($entity, $type) {
  hr_api_entity_hook('update', $entity, $type);
}

/**
 * Implements hook_entity_delete()
 */
function hr_api_entity_delete($entity, $type) {
  if ($type == 'node' || $type == 'taxonomy_term') {
    global $conf;
    list($id) = entity_extract_ids($type, $entity);
    $wrapper = entity_metadata_wrapper($type, $entity);
    $bundle = $wrapper->getBundle();
    foreach ($conf['hr_api_webhooks'] as $webhook) {
      if ($restful_plugin = hr_api_should_call_webhook($webhook, $type, $bundle)) {
        $resource = restful()->getResourceManager()->getPlugin($restful_plugin);
        $json_entity = new \stdClass();
        $json_entity->id = $id;
        hr_api_call_webhook($webhook, 'delete', $resource, 'en', array(), $json_entity);
      }
    }
  }
}

/**
 * API Entity hook.
 */
function hr_api_entity_hook($event, $entity, $type) {
  if ($type == 'node' || $type == 'taxonomy_term') {
    global $language;
    global $conf;
    $user = user_load(1);
    $call_webhook = FALSE;
    list($id) = entity_extract_ids($type, $entity);
    entity_get_controller($type)->resetCache(array($id));
    $wrapper = entity_metadata_wrapper($type, $id);
    $bundle = $wrapper->getBundle();
    foreach ($conf['hr_api_webhooks'] as $webhook) {
      if ($restful_plugin = hr_api_should_call_webhook($webhook, $type, $bundle)) {
        $langcode = $language->language;
        $resource = restful()->getResourceManager()->getPlugin($restful_plugin);
        if ($resource) {
          $resource->setAccount($user);
          $thandler = entity_translation_get_handler($type, $entity);
          $translations = $thandler->getTranslations();
          $translations = array_keys($translations->data);
          $json_entities = json_decode(restful()->getFormatterManager()->format($resource->doGet($id), 'json'));
          $json_entity = reset($json_entities->data);
          hr_api_call_webhook($webhook, $event, $resource, $langcode, $translations, $json_entity);
        }
      }
    }
  }
}

/**
 * API Webhook callback.
 */
function hr_api_should_call_webhook($webhook, $type, $bundle) {
  $types = array_keys($webhook['types']);
  if (in_array($type, $types)) {
    $bundles = array_keys($webhook['types'][$type]);
    if (in_array($bundle, $bundles)) {
      return $webhook['types'][$type][$bundle];
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * API Webhook callback.
 */
function hr_api_call_webhook($webhook, $event, $resource, $langcode, $translations, $entity) {
  $definition = $resource->getPluginDefinition();
  $url = $webhook['url'];
  $json = new \stdClass();
  $json->type = $definition['resource'];
  $json->language = $langcode;
  $json->translations = $translations;
  $json->entity = $entity;

  $headers = array(
    'X-HRInfo-Event: ' . $event,
    'Accept: application/json',
    'Authorization: ' . $webhook['secret'],
    'Content-Type: application/json',
  );

  $ch = curl_init();

  // Set URL and other appropriate options.
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($json));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FAILONERROR, TRUE);

  // Grab URL and pass it to the browser.
  $response = curl_exec($ch);

  // Switch user back to be able to use session again.
  $resource->switchUserBack();

  // Log errors to watchdog.
  if ($response === FALSE || curl_errno($ch)) {
    watchdog('hr_api_call_webhook', 'Curl HTTP code: @code', array(
      '@code' => curl_getinfo($ch, CURLINFO_HTTP_CODE),
    ));
    watchdog('hr_api_call_webhook', 'Curl error: @error', array(
      '@error' => curl_error($ch),
    ));
    watchdog('hr_api_call_webhook', 'This content could not be saved to Humanitarian ID. You can try to resave this page, or contact an administrator');
    drupal_set_message(t('This content could not be saved to Humanitarian ID. You can try to resave this page, or contact an administrator'), 'error');
  }

  // Close cURL resource, and free up system resources.
  curl_close($ch);
}
