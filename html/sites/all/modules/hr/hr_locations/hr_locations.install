<?php

/**
 * @file
 * Install file for the locations.
 */

/**
 * Swith to hierarchical select.
 */
function hr_locations_update_7000() {
  $entity_type = 'node';
  $field_name = 'field_locations';
  $field_info = field_info_field($field_name);

  $bundles = array(
    'acc_incident',
    'hr_news',
    'acc_application',
    'hr_contact',
    'hr_assessment',
    'hr_infographic',
    'hr_dataset',
    'hr_document',
  );

  foreach ($bundles as $bundle) {
    if ($field_instance = field_info_instance($entity_type, $field_name, $bundle)) {
      $field_instance['description'] = 'Select from the menu the country(ies) the document is about. You can add more specific locations by selecting multiple layers (region, province, town).';
      $field_instance['widget']['type'] = 'hser_hierarchy';
      $field_instance['widget']['module'] = 'hser';
      $field_instance['widget']['active'] = TRUE;
      $field_instance['widget']['settings']['editable'] = FALSE;
      $field_instance['widget']['settings']['apply_chosen'] = FALSE;
      unset($field_instance['widget']['settings']['shs']);
      field_update_instance($field_instance);
    }
  }
}

/**
 * Swith to simple hierarchical select.
 */
function hr_locations_update_7001() {
  $entity_type = 'node';
  $field_name = 'field_locations';
  $field_info = field_info_field($field_name);

  $bundles = array(
    'acc_incident',
    'hr_news',
    'acc_application',
    'hr_contact',
    'hr_assessment',
    'hr_infographic',
    'hr_dataset',
    'hr_document',
  );

  foreach ($bundles as $bundle) {
    if ($field_instance = field_info_instance($entity_type, $field_name, $bundle)) {
      $field_instance['description'] = 'Select from the menu the country(ies) the document is about. You can add more specific locations by selecting multiple layers (region, province, town).';
      $field_instance['widget']['type'] = 'taxonomy_shs';
      $field_instance['widget']['module'] = 'shs';
      $field_instance['widget']['active'] = TRUE;

      $field_instance['widget']['settings']['shs']['node_count'] = 0;
      $field_instance['widget']['settings']['shs']['create_new_terms'] = 0;
      $field_instance['widget']['settings']['shs']['create_new_levels'] = 0;
      $field_instance['widget']['settings']['shs']['force_deepest'] = 0;
      $field_instance['widget']['settings']['shs']['use_chosen'] = 'chosen';
      unset($field_instance['widget']['settings']['editable']);
      unset($field_instance['widget']['settings']['apply_chosen']);
      field_update_instance($field_instance);
    }
  }
}

/**
 * Remove location terms level 5.
 */
function hr_locations_update_7002(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = (float)0;
    $sandbox['max'] = 100;
  }

  $voc_name = 'hr_location';
  $vocabulary = taxonomy_vocabulary_machine_name_load($voc_name);

  // Load all terms of admi level 4 or higher.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabulary->vid)
    ->fieldCondition('field_loc_admin_level', 'value', '5', '>=')
    ->range(0, 100)
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    db_query('CREATE OR REPLACE FUNCTION "substring_index"(text, text, integer) RETURNS text AS
      \'SELECT array_to_string((string_to_array($1, $2)) [1:$3], $2);\'
      LANGUAGE \'sql\''
    );

    $term_ids = array_keys($result['taxonomy_term']);
    foreach ($term_ids as $term_id) {
      // Check if any node is tagged with this term.
      $nids = taxonomy_select_nodes($term_id, FALSE);
      if ($nids) {
        // Get parent from term.
        $parent = taxonomy_get_parents($term_id);
        $parent_id = reset(array_keys($parent));
        $sql = "update {field_data_field_locations} set field_locations_target_id = :parent where field_locations_target_id = :term and entity_id IN (:nids)";
        db_query($sql, array(
          ':parent' => $parent_id,
          ':term' => $term_id,
          ':nids' => $nids,
        ));
      }
      taxonomy_term_delete($term_id);
    }
    $sandbox['progress']++;
    $sandbox['#finished'] = FALSE;
  }
  else {
    $sandbox['progress'] = 10000;
    $sandbox['#finished'] = TRUE;
  }
}

/**
 * Used to be admin level 4.
 */
function hr_locations_update_7003(&$sandbox) {
  // Empty
}

/**
 * Remove location terms level 4 - Test.
 */
function hr_locations_update_7004(&$sandbox) {
  watchdog('hr location', 'Deleting location terms, please stand by');
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = (float)0;
    $sandbox['max'] = 100;
  }

  $voc_name = 'hr_location';
  $vocabulary = taxonomy_vocabulary_machine_name_load($voc_name);

  // Load all terms of admi level 4 or higher.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabulary->vid)
    ->fieldCondition('field_loc_admin_level', 'value', '4', '>=')
    ->range(0, 100)
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    db_query('CREATE OR REPLACE FUNCTION "substring_index"(text, text, integer) RETURNS text AS
      \'SELECT array_to_string((string_to_array($1, $2)) [1:$3], $2);\'
      LANGUAGE \'sql\''
    );

    watchdog('hr location', 'Found terms');
    $term_ids = array_keys($result['taxonomy_term']);
    foreach ($term_ids as $term_id) {
      // Check if any node is tagged with this term.
      $nids = taxonomy_select_nodes($term_id, FALSE);
      if ($nids) {
        // Get parent from term.
        $parent = taxonomy_get_parents($term_id);
        $parent_id = reset(array_keys($parent));
        $sql = "update {field_data_field_locations} set field_locations_target_id = :parent where field_locations_target_id = :term and entity_id IN (:nids)";
        db_query($sql, array(
          ':parent' => $parent_id,
          ':term' => $term_id,
          ':nids' => $nids,
        ));
      }
      taxonomy_term_delete($term_id);
    }
  }
  watchdog('hr location', 'Done for now');
  $sandbox['progress'] = 10000;
  $sandbox['#finished'] = TRUE;
}

/**
 * Disable lazy_panelizer.
 */
function hr_locations_update_7005(&$sandbox) {
  module_disable(array('lazy_panelizer'));
}

/**
 * Enable maintenance page.
 */
function hr_locations_update_7006(&$sandbox) {
  module_enable(array('maintenance200'));
}

/**
 * Remove location terms level 4 for real.
 */
function hr_locations_update_7007(&$sandbox) {
  watchdog('hr location', 'Deleting location terms, please stand by');
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = (float)0;
    $sandbox['max'] = 100;
  }

  $voc_name = 'hr_location';
  $vocabulary = taxonomy_vocabulary_machine_name_load($voc_name);

  // Load all terms of admi level 4 or higher.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabulary->vid)
    ->fieldCondition('field_loc_admin_level', 'value', '4', '>=')
    ->range(0, 100)
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    db_query('CREATE OR REPLACE FUNCTION "substring_index"(text, text, integer) RETURNS text AS
      \'SELECT array_to_string((string_to_array($1, $2)) [1:$3], $2);\'
      LANGUAGE \'sql\''
    );

    watchdog('hr location', 'Found terms');
    $term_ids = array_keys($result['taxonomy_term']);
    foreach ($term_ids as $term_id) {
      taxonomy_term_delete($term_id);
    }
    $sandbox['progress']++;
    $sandbox['#finished'] = FALSE;
  }
  else {
    watchdog('hr location', 'Done');
    $sandbox['progress'] = 10000;
    $sandbox['#finished'] = TRUE;
  }
}

/**
 * Set maintenance page code to 203.
 */
function hr_locations_update_7008(&$sandbox) {
  variable_set('maintenance_mode_status', '203 Non-Authoritative Information');
}

/**
 * Change progress bar to throbber.
 */
function hr_locations_update_7009(&$sandbox) {
  $entity_type = 'field_collection_item';
  $field_name = 'field_file';
  $field_info = field_info_field($field_name);

  $bundle = 'field_files_collection';
  $field_instance = field_info_instance($entity_type, $field_name, $bundle);
  $field_instance['widget']['settings']['progress_indicator'] = 'throbber';
  field_update_instance($field_instance);

  // Disable nginx.
  module_disable(array('filefield_nginx_progress'));
}

/**
 * Enable new relic.
 */
function hr_locations_update_7010(&$sandbox) {
  module_enable(array('panels_newrelic_insight'));
}
