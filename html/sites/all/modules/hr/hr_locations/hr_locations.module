<?php
/**
 * @file
 * Code for the Locations feature.
 */

include_once 'hr_locations.features.inc';

/**
 * Implement hook_taxonomy_term_presave($term)
 * Calculates and adds the admin level in a field to the term so that it
 * can be stored in the database.
 */
function hr_locations_taxonomy_term_presave($term) {
  if (empty($term->field_loc_admin_level[LANGUAGE_NONE])) {
    // Get term parents
    $parents = taxonomy_get_parents_all($term->tid);
    $term->field_loc_admin_level[LANGUAGE_NONE] = array(array('value' => count($parents)-1));
  }
}

/**
 * Implements hook_shs_json_callbacks_alter()
 * Allows filter by parent in the API
 */
function hr_locations_shs_json_callbacks_alter(&$callbacks) {
  $callbacks['shs_json_term_get_children']['callback'] = 'hr_locations_shs_json_term_get_children';
}

function hr_locations_shs_json_term_get_children($vid, $parent = array(), $settings = array(), $field = NULL) {
  $cache_key = "hr_location_cache:" . $vid . '_' . md5(serialize($parent));
  $cache = cache_get($cache_key);

  if (!$cache || ($cache->expire && time() > $cache->expire)) {
    $scope = $result = array();
    foreach ($parent as $tid) {
      $scope[] = shs_term_get_children($vid, $tid, $settings);
      if (shs_add_term_access($vid, $tid, $field)) {
        $result[] = array(
          'vid' => $vid,
        );
      }
    }

    $has_children = _hr_locations_taxonomy_get_all_children($scope);

    // Rewrite result set to preserve original sort of terms through JSON request.
    foreach ($scope as $terms) {
      foreach ($terms as $tid => $label) {
        $result[] = array(
          'tid' => $tid,
          'label' => $label,
          'has_children' => array_key_exists($tid, $has_children) ? TRUE : FALSE,
        );
      }
    }
    cache_set($cache_key, $result, 'cache', REQUEST_TIME + 2*60*60);
    return $result;
  }

  return $cache->data;
}

function _hr_locations_taxonomy_get_all_children($scope) {
  $tids = array();
  foreach ($scope as $terms) {
    foreach ($terms as $tid => $label) {
      $tids[$tid] = $tid;
    }
  }

  if (empty($tids)) {
    return array();
  }

  $sql = 'SELECT DISTINCT parent, 1 FROM {taxonomy_term_hierarchy} WHERE parent IN (:tids)';
  $result = db_query($sql, array(':tids' => array_keys($tids)))->fetchAllAssoc('parent', PDO::FETCH_ASSOC);

  return $result;
}
