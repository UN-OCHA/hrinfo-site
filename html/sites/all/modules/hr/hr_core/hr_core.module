<?php

/**
 * @file
 * Code for the Core feature.
 */

define('HR_CORE_OG_AUDIENCE_FIELD', 'hr_core_gid');

include_once 'hr_core.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function hr_core_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function hr_core_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
  $entity_info['field_collection_item']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
  $entity_info['fieldable_panels_pane']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['fieldable_panels_pane']['view modes']['link'] = array(
    'label' => t('Link'),
    'custom settings' => TRUE,
  );
  $entity_info['user']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Hides fields if they are empty.
 */
function hr_core_form_alter(&$form, &$form_state, $form_id) {
  // Disable private groups and group content.
  if (isset($form['group_access'])) {
    $user_roles = user_roles();
    $user_roles = array_flip($user_roles);
    if (!user_has_role($user_roles['administrator'])) {
      $form['group_access']['#access'] = FALSE;
    }
  }
  if (isset($form['group_content_access'])) {
    $user_roles = user_roles();
    $user_roles = array_flip($user_roles);
    if (!user_has_role($user_roles['administrator'])) {
      $form['group_content_access']['#access'] = FALSE;
    }
  }

  foreach ($form as $id => &$item) {
    if (is_array($item) && isset($item['#type']) && $item['#type'] == 'container') {
      switch ($item['#type']) {
        case 'container':
          $language = isset($item['#language']) ? $item['#language'] : LANGUAGE_NONE;
          if (isset($item[$language]['#type']) && $item[$language]['#type'] == 'select') {
            $diff = array_diff($item[$language]['#options'], array('_none' => '- None -'));
            if (empty($diff)) {
              $item['#type'] = 'hidden';
            }
          }
          break;

        case 'select':
          if (empty($item['#options'])) {
            $item['#type'] = 'hidden';
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function hr_core_pathauto_alias_alter(&$alias, array &$context) {
  // Force all aliases to be saved as language neutral.
  $context['language'] = LANGUAGE_NONE;
}

/**
 * Implements hook_path_insert().
 */
function hr_core_path_insert($path) {
  if ($path['language'] != LANGUAGE_NONE) {
    $initial_path = path_load(
      array('source' => $path['source'], 'language' => LANGUAGE_NONE)
    );
    if (!empty($initial_path)) {
      path_delete($path['pid']);
    }
    else {
      $path['language'] = LANGUAGE_NONE;
      // Resave path.
      path_save($path);
    }
  }
}

/**
 * Implements hook_entity_presave()
 *
 * Makes sure pathauto is not used when no path is set.
 */
function hr_core_entity_presave($node, $type) {
  if (!isset($node->path['pathauto'])) {
    $node->path['pathauto'] = FALSE;
  }
}

/**
 * Implements hook_field_extra_fields()
 */
function hr_core_field_extra_fields() {
  $content_types = array(
    'hr_document',
    'hr_infographic',
  );
  foreach ($content_types as $content_type) {
    $extra['node'][$content_type]['display'] = array(
      'hr_core_share_button' => array(
        'label' => t('Share button'),
        'description' => t('Share button'),
        'weight' => 0,
      ),
      'hr_core_read_more_button' => array(
        'label' => t('Read more button'),
        'description' => t('Read more button'),
        'weight' => 0,
      ),
      'hr_core_files_download_button' => array(
        'label' => t('Download button'),
        'description' => t('Download button'),
        'weight' => 0,
        'callback' => '_hr_core_files_download_button',
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function hr_core_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'node' && isset($entity->type)) {
    $extra_fields = field_info_extra_fields($type, $entity->type, 'display');
    $field_name = 'hr_core_files_download_button';
    $entity->content[$field_name] = array(
      '#type' => 'item',
      '#title' => '',
      '#markup' => _hr_core_files_download_button($entity, $type),
    );
  }
}

/**
 * Render files as dropdown button.
 */
function _hr_core_files_download_button($entity, $type) {
  $output = '';

  $output .= '<div>';
  $output .= '<div class="btn-group">';
  $output .= '<button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown"><i class="fa fa-download"></i> download <span class="caret"></span></button>';
  $output .= '<ul class="dropdown-menu">';

  $language_list = _languagefield_options();
  $items = field_get_items($type, $entity, 'field_files_collection');

  if (empty($items) || !is_array($items)) {
    return;
  }

  foreach ($items as $delta => $item) {
    $fc = field_collection_item_revision_load($item['revision_id']);

    $file = field_get_items('field_collection_item', $fc, 'field_file');

    // Bail if the file no longer exists.
    if (!$file) {
      continue;
    }
    $file = reset($file);

    $language = field_get_items('field_collection_item', $fc, 'field_language');
    $file_language = '';
    if (is_array($language)) {
      $language = reset($language);
      if (isset($language_list[$language['value']])) {
        $file_language = !empty($language['value']) ? '(' . $language_list[$language['value']]['name_native'] . ')' : '';
      }
    }

    $file_title = isset($file['title']) ? $file['title'] : $file['filename'];
    $file_url = file_create_url($file['uri']);

    $output .= '<li>' . l($file_title . ' ' . $file_language, $file_url, array(
      'attributes' => array('target' => '_blank')
    )) . '</li>';
  }

  $output .= '</ul>';
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_node_view().
 *
 * Adds share button.
 */
function hr_core_node_view($node, $view_mode, $langcode) {
  $url = url('node/' . $node->nid, array('absolute' => TRUE));
  $node->content['hr_core_share_button'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => l(
      '<i class="fa fa-share"></i> ' . t('share'),
      'http://www.addtoany.com/share_save',
      array(
        'attributes' => array(
          'class' => array(
            'a2a_dd',
            'btn',
            'btn-secondary',
            'btn-sm'
          )
        ),
        'html' => TRUE
      )
    ),
    '#suffix' => '<script type="text/javascript">if (typeof a2a_config !== "undefined") { a2a_config.linkname = "' . $node->title . '";a2a_config.linkurl = "' . $url . '";a2a.init("page");}</script>',
    '#attached' => array('js' => array('https://static.addtoany.com/menu/page.js')),
  );

  $node->content['hr_core_read_more_button'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => l(
      '<i class="fa fa-eye"></i> ' . t('read more'),
      'node/' . $node->nid,
      array(
        'attributes' => array(
          'class' => array(
            'btn',
            'btn-secondary',
            'btn-sm'
          )
        ),
        'html' => TRUE
      )
    ),
  );
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function hr_core_og_context_negotiation_info() {
  $providers = array();

  $providers['hr_core'] = array(
    'name' => t('HR Core'),
    'description' => t('Sets group context within space'),
    'callback' => 'hr_core_og_context_handler',
    'menu path' => array('node/%', 'group/%/%/admin'),
  );
  return $providers;
}

/**
 * Context handler callback.
 */
function hr_core_og_context_handler($node = NULL) {
  $context = NULL;
  if ($node == NULL) {
    $nid = arg(1);
    if (is_numeric($nid)) {
      $node = node_load($nid);
      if ($node) {
        $context = og_context_handler_node($node);
      }
    }
  }
  return $context;
}

/**
 * Implements hook_token_info()
 */
function hr_core_token_info() {
  $info['site']['og_context_current_group'] = array(
    'name' => t('Current group'),
    'description' => t('Current group from OG context'),
  );
  return $info;
}

/**
 * Implements hook_tokens()
 */
function hr_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'og_context_current_group':
          $group = og_context();
          if (isset($group['gid'])) {
            $node = node_load($group['gid']);
            $replacements[$original] = $node->title;
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Return a button with a label.
 */
function _hr_core_draft_button($label) {
  return array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t($label),
    '#weight' => 6,
    '#submit' =>
      array(
        0 => 'node_form_submit',
      ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter the node edit forms.
 */
function hr_core_form_node_form_alter(&$form, &$form_state) {

  _hr_core_render_multiple_input_lines($form, $form_state);

  $guideline_bundles = array(
    'hr_assessment',
    'hr_document',
    'hr_event',
    'hr_infographic',
  );
  if (in_array($form['#bundle'], $guideline_bundles)) {
    $form['#attached']['js'][] = drupal_get_path('module', 'hr_core') . '/js/hr_core_guidelines.js';
    $form['#attached']['css'][] = drupal_get_path('module', 'hr_core') . '/css/hr_core_guidelines.css';
  }

  if (isset($form['field_related_content']) && !empty($form['field_related_content']['und'])) {
    $form['field_related_content']['und']['#after_build'][] = 'hr_core_related_content_after_build';
  }

  $node = $form['#node'];
  if (isset($_GET[OG_AUDIENCE_FIELD])) {
    $node->{HR_CORE_OG_AUDIENCE_FIELD} = $_GET[OG_AUDIENCE_FIELD];
  }
  array_unshift($form['#validate'], 'hr_core_save_draft_validate');
  if (!variable_get('publishcontent_' . $node->type, FALSE)) {
    if (!isset($node->nid)) {
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
    }
    else {
      if ($node->status == 1) {
        $form['actions']['draft'] = _hr_core_draft_button('Unpublish');
      }
      else {
        $form['actions']['submit']['#value'] = t('Publish');
        $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
      }

    }
    // TODO: check this is intended to skip all the rest of this function.
    return;
  }

  // Limit disasters/hubs to selected groups on node edit.
  if (isset($form['field_disasters']) || isset($form['field_coordination_hubs'])) {
    $groups = array();
    if (isset($form['#node']->og_group_ref) && isset($form['#node']->og_group_ref['und'])) {
      foreach ($form['#node']->og_group_ref['und'] as $group_ref) {
        $groups[] = $group_ref['target_id'];
      }
    }

    if (empty($groups)) {
      $group = og_context();
      if (!empty($group)) {
        $groups = array($group['gid']);
      }
    }

    if (!empty($groups)) {
      if (isset($form['field_disasters'])) {
        $efq = new EntityFieldQuery();
        $results = $efq->entityCondition('entity_type', 'node')
          ->propertyCondition('status', NODE_PUBLISHED)
          ->entityCondition('bundle', 'hr_disaster')
          ->fieldCondition('og_group_ref', 'target_id', $groups, 'IN')
          ->propertyOrderBy('created', 'DESC')
          ->execute();
        if (isset($results['node'])) {
          $options = array(
            '_none' => '- None -',
          );
          $disasters = entity_load('node', array_keys($results['node']));
          foreach ($disasters as $nid => $disaster) {
            $options[$nid] = $disaster->title;
          }
          $form['field_disasters']['und']['#options'] = $options;
        }
        else {
          $form['field_disasters']['#access'] = FALSE;
        }
      }

      if (isset($form['field_coordination_hubs'])) {
        $efq = new EntityFieldQuery();
        $results = $efq->entityCondition('entity_type', 'node')
          ->propertyCondition('status', NODE_PUBLISHED)
          ->entityCondition('bundle', 'hr_office')
          ->fieldCondition('og_group_ref', 'target_id', $groups, 'IN')
          ->fieldCondition('field_is_coordination_hub', 'value', 1)
          ->execute();
        if (isset($results['node'])) {
          $options = array(
            '_none' => '- None -',
          );
          $offices = entity_load('node', array_keys($results['node']));
          foreach ($offices as $nid => $office) {
            $options[$nid] = $office->title;
          }
          asort($options);

          $form['field_coordination_hubs']['und']['#options'] = $options;
        }
        else {
          $form['field_coordination_hubs']['#access'] = FALSE;
        }
      }
    }
  }

  if (publishcontent_publish_access($node)) {
    if (!isset($node->nid)) {
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
    }
  }
  else {
    if (isset($node->clone_from_original_nid)) {
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
    }
    elseif (!isset($node->nid)) {
      $form['actions']['submit']['#value'] = t('Save As Draft');
    }
  }

}

/**
 * Implements hook_theme_registry_alter().
 */
function hr_core_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['field_multiple_value_form'])) {
    $theme_registry['field_multiple_value_form']['type'] = 'module';
    $theme_registry['field_multiple_value_form']['theme path'] = drupal_get_path('module', 'hr_core');
    $theme_registry['field_multiple_value_form']['function'] = 'hr_core_theme_field_multiple_value_form';
  }
}

/**
 * Override to remove drag-n-drop table when indicated.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the form element.
 *
 * @see theme_field_multiple_value_form()
 * @ingroup themeable
 */
function hr_core_theme_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';

  // These fields are also in _hr_core_render_multiple_input_lines().
  $no_drag_fields = array(
    'field_data_sources',
    'field_files_collection',
    'field_hid_contact_ref',
    'field_locations',
    'field_phones',
    'field_related_content',
  );
  if (in_array($element['#field_name'], $no_drag_fields) && ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED)) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'class' => array('field-label'),
      ),
    );
    $rows = array();

    // Sort items according to 'weight'.
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {
      // We don't want the weight to render.
      unset($item['_weight']);
      $cells = array(
        drupal_render($item),
      );
      $rows[] = array(
        'data' => $cells,
      );
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table'),
      ),
    ));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';
  }
  elseif ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        drupal_render($item),
        array('data' => $delta_element, 'class' => array('delta-order')),
      );
      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table')
      )
    ));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';

    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }

  return $output;
}

/**
 * Helper to render multiple inputs for fields.
 */
function _hr_core_render_multiple_input_lines(&$form, &$form_state) {
  // Skip if this node already exists, or is a clone.
  if (isset($form['clone_from_original_nid']) || isset($form['#node']->nid)) {
    return;
  }

  $field_names = array(
    'field_data_sources' => 4,
    'field_files_collection' => 4,
    'field_hid_contact_ref' => 2,
    'field_locations' => 4,
    'field_phones' => 4,
    'field_related_content' => 4,
  );

  foreach ($field_names as $field_name => $items_count) {

    if (!isset($form[$field_name])) {
      continue;
    }

    $field_language = $form[$field_name]['#language'];
    $form_theme = $form[$field_name][$field_language]['#theme'];

    // Remove delete and add more buttons.
    $form[$field_name][$field_language][0]['remove_button']['#access'] = FALSE;
    $form[$field_name][$field_language]['add_more']['#access'] = FALSE;

    $items = &$form_state['field'][$field_name][$field_language];

    // Generate required number of fields collection.
    if ($items_count > 1 and $items['items_count'] != $items_count) {
      $items['items_count'] = $items_count;
      $items['field']['cardinality'] = $items_count;
      $form[$field_name][$field_language] += field_multiple_value_form($items['field'], $items['instance'], $field_language, array(), $form, $form_state);
      $form[$field_name][$field_language]['#description'] .= t(' Add up to @count values using the "Add another item" button. To add more, save the form as draft then edit it.', array('@count' => $items_count));

      // Reset theme function.
      $form[$field_name][$field_language]['#theme'] = $form_theme;
    }

    // Attach js to handle add-more-button.
    $form['#attached']['js'][] = drupal_get_path('module', 'hr_core') . '/js/hr_core_add_more.js';
    // Let js know which extra fields to hide.
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('hr_core' => array('fields' => array($field_name))),
    );
  }
}

/**
 * Handles save draft form validation.
 */
function hr_core_save_draft_validate($form, &$form_state) {
  // Set the node to be published or unpublished depending on which button was
  // clicked.
  if ($form_state['triggering_element']['#value'] == t('Save As Draft')
    || $form_state['triggering_element']['#value'] == t('Unpublish')) {
    $form_state['values']['status'] = 0;
  }
  elseif ($form_state['triggering_element']['#value'] == t('Publish')) {
    $form_state['values']['status'] = 1;
  }
}

/**
 * Implements hook_publishcontent_publish_access().
 */
function hr_core_publishcontent_publish_access($node, $account) {
  $access = FALSE;
  if (!isset($node->nid) && isset($node->{HR_CORE_OG_AUDIENCE_FIELD})) {
    $entity_type = 'node';
    $entity_id = $node->{HR_CORE_OG_AUDIENCE_FIELD};
    $access = og_user_access(
        $entity_type,
        $entity_id,
        'administer nodes',
        $account
      )
      || og_user_access(
        $entity_type,
        $entity_id,
        'publish any content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish own content',
          $account
        ) && $account->uid == $node->uid)
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish editable content',
          $account
        ) && node_access('update', $node))
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish own ' . check_plain($node->type) . ' content',
          $account
        ) && $account->uid == $node->uid)
      || og_user_access(
        $entity_type,
        $entity_id,
        'publish any ' . check_plain($node->type) . ' content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish editable ' . check_plain($node->type) . ' content',
          $account
        ) && node_access('update', $node));

    return $access ? PUBLISHCONTENT_ACCESS_ALLOW : PUBLISHCONTENT_ACCESS_IGNORE;
  }
  else {
    return PUBLISHCONTENT_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_publishcontent_unpublish_access().
 */
function hr_core_publishcontent_unpublish_access($node, $account) {
  if (!isset($node->nid) && isset($node->{HR_CORE_OG_AUDIENCE_FIELD})) {
    $entity_type = 'node';
    $entity_id = $node->{HR_CORE_OG_AUDIENCE_FIELD};
    $access = og_user_access(
        $entity_type,
        $entity_id,
        'administer nodes',
        $account
      )
      || og_user_access(
        $entity_type,
        $entity_id,
        'unpublish any content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish own content',
          $account
        ) && $account->uid == $node->uid)
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish editable content',
          $account
        ) && node_access('update', $node))
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish own ' . check_plain($node->type) . ' content',
          $account
        ) && $account->uid == $node->uid)
      || og_user_access(
        $entity_type,
        $entity_id,
        'unpublish any ' . check_plain($node->type) . ' content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish editable ' . check_plain($node->type) . ' content',
          $account
        ) && node_access('update', $node));
    return $access ? PUBLISHCONTENT_ACCESS_ALLOW : PUBLISHCONTENT_ACCESS_IGNORE;
  }
  else {
    return PUBLISHCONTENT_ACCESS_IGNORE;
  }
}

/**
 * Returns true if a menu item for a given path exists, false otherwise.
 */
function hr_core_menu_link_exists($path, $menu_name) {
  $links = db_select('menu_links', 'ml')
    ->fields('ml')
    ->condition('ml.menu_name', $menu_name)
    ->condition('ml.link_path', $path)
    ->orderBy('weight')
    ->execute()
    ->fetchAll();

  return !empty($links);
}

/**
 * Implements hook_addressfield_default_values_alter()
 *
 * Sets default country to the country of the space
 * See https://atrium.humanitarianresponse.info/humanitarian_response/node/4329.
 */
function hr_core_addressfield_default_values_alter(&$default_values, $context) {
  if (empty($default_values['country'])) {
    $default_values['country'] = variable_get('site_default_country', 'SW');
  }
}

/**
 * Implements hook_languagefield_options_alter()
 *
 * Added Dari as a language. See https://atrium.humanitarianresponse.info/humanitarian_response/node/4367.
 */
function hr_core_languagefield_options_alter(&$languages, $subsets, $langcode) {
  if (!isset($languages['prs'])) {
    $languages['prs'] = array(
      'value' => 'prs',
      'langcode' => 'prs',
      'name' => 'Dari',
      'native' => 'دری',
      'name_native' => 'Dari (دری)',
    );
  }
}

/**
 * After build for field_related_content.
 *
 * Remove title description, set in link module.
 */
function hr_core_related_content_after_build($element) {
  foreach (element_children($element) as $child) {
    if (!empty($element[$child]['title'])) {
      unset($element[$child]['title']['#description']);
    }
  }
  return $element;
}

/**
 * Implements hook_panels_new_pane_alter($pane)
 *
 * Set default panel style to hr_highlighted.
 */
function hr_core_panels_new_pane_alter(&$pane) {
  $pane->style['style'] = 'hr_highlighted';
}

/**
 * Redirect user to operation page after deletion of content.
 *
 * @see http://atrium.humanitarianresponse.info/humanitarian_response/node/3992
 */
function hr_core_node_delete($node) {
  if (isset($node->{OG_AUDIENCE_FIELD}) && isset($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id'])) {
    $nid = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id'];
    $_GET['destination'] = 'node/' . $nid;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_core_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  $form['buttons']['submit']['#submit'][] = 'hr_core_panels_ipe_clear_cache';
}

/**
 * Form callback handler.
 *
 * Additional form callback that ensures that the panelizer page cache is
 * cleared.
 */
function hr_core_panels_ipe_clear_cache($form, &$form_state) {
  if (!empty($form_state['panelizer entity'])) {
    $entity = $form_state['panelizer entity'];
    $uri = entity_uri($entity->entity_type, $entity);
    // Clear all language cache.
    $uri['options']['language'] = '';
    if ($url = url($uri['path'], $uri['options'])) {
      // Manually delete the cache because the cid is a full url we don't know
      // how's going to be generated.
      // @See cache_clear_all().
      db_delete('cache_page')
        ->condition('cid', '%' . db_like($url) . '%', 'LIKE')
        ->execute();
    }

  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * Overrides the file.inc mapping to correctly set the allowed extensions for
 * files inside field collections.
 */
function hr_core_feeds_processor_targets_alter(array &$targets, $entity_type, $bundle) {
  if ($bundle == 'field_files_collection') {
    foreach ($targets as $target_id => &$target) {
      if ((isset($target['real_target'])) && $target['real_target'] == 'field_file') {
        if ($target_id == 'field_file:uri') {
          $target['callback'] = 'hr_core_file_feeds_set_target';
        }
      }
    }
  }
}

/**
 * Callback for mapping file fields inside field_collections.
 *
 * @see file_feeds_set_target()
 */
function hr_core_file_feeds_set_target(FeedsSource $source, $entity, $target, array $values) {
  // Add default of uri for backwards compatibility.
  list($field_name, $sub_field) = explode(':', $target . ':uri');
  $info = field_info_field($field_name);

  // We're acting for uris only.
  if ($sub_field != 'uri') {
    return;
  }

  foreach ($values as $k => $v) {
    if (!($v instanceof FeedsEnclosure)) {
      if (is_string($v)) {
        $values[$k] = new FeedsEnclosure($v, file_get_mimetype($v));
      }
      else {
        // Set the value for FALSE rather than remove it to keep our deltas
        // correct.
        $values[$k] = FALSE;
      }
    }
  }

  $entity_type = $entity->entityType();
  $bundle = $entity->bundle();
  $instance_info = field_info_instance($entity_type, $field_name, $bundle);

  // Determine file destination.
  // @todo This needs review and debugging.
  $data = array();
  if (!empty($entity->uid)) {
    $data[$entity_type] = $entity;
  }

  $destination = file_field_widget_uri($info, $instance_info, $data);

  // Populate entity.
  $field = isset($entity->$field_name) ? $entity->$field_name : array(LANGUAGE_NONE => array());
  $delta = 0;
  foreach ($values as $v) {
    if ($info['cardinality'] == $delta) {
      break;
    }

    if (!isset($field[LANGUAGE_NONE][$delta])) {
      $field[LANGUAGE_NONE][$delta] = array();
    }

    if ($v) {
      try {
        $v->setAllowedExtensions($instance_info['settings']['file_extensions']);
        $field[LANGUAGE_NONE][$delta] += (array) $v->getFile($destination);
        // @todo: Figure out how to properly populate this field.
        $field[LANGUAGE_NONE][$delta]['display'] = 1;
      }
      catch (Exception $e) {
        watchdog('feeds', check_plain($e->getMessage()));
      }
    }

    $delta++;
  }

  $entity->$field_name = $field;
}

/**
 * Implements hook_module_implements_alter().
 */
function hr_core_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'feeds_processor_targets_alter':
      // Move some of our hook implementations to the end of the list.
      $group = $implementations['hr_core'];
      unset($implementations['hr_core']);
      $implementations['hr_core'] = $group;
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function hr_core_menu_alter(&$items) {
  if (isset($items['node/%/group'])) {
    $items['node/%/group']['access callback'] = 'hr_core_group_tab_access';
  }
}

/**
 * Access callback override for the group tab.
 */
function hr_core_group_tab_access($entity_type, $etid) {
  $entity = entity_load_single($entity_type, $etid);
  if (!og_is_group($entity_type, $entity)) {
    return FALSE;
  }

  // Fallback to the original callback.
  return og_ui_get_group_admin($entity_type, $etid);
}

/**
 * Set caching of panel pane.
 */
function _hr_core_pane_cache_content_by_type($type, $subtype, $node_type, $minutes = 'none', $margin = 5) {
  $sql = "SELECT * FROM {panels_pane} WHERE type='$type'";
  if (!empty($subtype)) {
    $sql .= " AND subtype='$subtype'";
  }
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'hr_content',
      'settings' => array(
        'granularity' => array(
          'args' => 'args',
          'user_role' => 'user_role',
        ),
        'granularity_url' => 'base_url_system',
        'granularity_roles_as_anon' => array(),
        'granularity_role_selection' => 'all',
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'content_type' => $node_type,
      ),
    );

    db_update('panels_pane')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('pid', $obj->pid, '=')
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Set caching of panel pane.
 */
function _hr_core_pane_cache_simple($type, $subtype = '', $minutes = 15, $margin = 5) {
  $sql = "SELECT * FROM {panels_pane} WHERE type='$type'";
  if (!empty($subtype)) {
    $sql .= " AND subtype='$subtype'";
  }
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'simple',
      'settings' => array(
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'granularity' => 'context',
      ),
    );

    db_update('panels_pane')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('pid', $obj->pid, '=')
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Set caching of panel display.
 */
function _hr_core_display_cache_content($minutes = 'none', $margin = 5) {
  $sql = "SELECT * FROM {panels_display}";
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'hr_content',
      'settings' => array(
        'granularity' => array(
          'args' => 'args',
          'user_role' => 'user_role',
          'context' => 'context',
        ),
        'granularity_url' => 'base_url_system',
        'granularity_roles_as_anon' => array(),
        'granularity_role_selection' => 'all',
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'content_type' => 'hr_operation',
      ),
    );

    db_update('panels_display')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Set caching of panel display.
 */
// @codingStandardsIgnoreLine
function _hr_core_display_cache_content_defaults($minutes = 'none', $margin = 5, $content_type) {
  $sql = "SELECT * FROM {panels_display} WHERE storage_id LIKE 'node:$content_type%'";
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'hr_content',
      'settings' => array(
        'granularity' => array(
          'args' => 'args',
          'user_role' => 'user_role',
          'context' => 'context',
        ),
        'granularity_url' => 'base_url_system',
        'granularity_roles_as_anon' => array(),
        'granularity_role_selection' => 'all',
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'content_type' => $content_type,
      ),
    );

    db_update('panels_display')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Implements hook_ctools_content_subtype_alter().
 */
function hr_core_ctools_content_subtype_alter(&$subtype, &$plugin) {
  // Bail out soon.
  if (!isset($plugin['name']) || in_array($plugin['name'], array(
    'block',
    'entity_form_field',
    'token',
    'entity_field_extra',
    'entity_field',
    'entity_view',
    'flag_link',
    'views',
  ))) {
    return;
  }

  // Bail out soon.
  if (isset($plugin['category']) && in_array($plugin['category'], array(
    'Comment',
    'User',
    'Form',
  ))) {
    return;
  }

  $categories = array(
    'hr_layout_rss_feeds' => array(
      'category' => 'Custom content',
      'title' => 'RSS Feed',
    ),
    'node_body' => array(
      'category' => 'Custom content',
      'title' => 'Node body',
    ),
    'fieldable_panels_pane' => array(
      'category' => 'Custom content',
      'title' => 'Free text',
    ),

    'hr_contacts_key_contacts' => array(
      'category' => 'Outdated',
      'title' => 'Static contacts',
    ),
    'hr_contacts' => array(
      'category' => 'Outdated',
      'title' => 'Dynamic contacts 1',
    ),
    'contacts' => array(
      'category' => 'Outdated',
      'title' => 'Dynamic contacts 2',
    ),

    'hid_profiles_checkins' => array(
      'category' => 'Contacts by HID',
      'title' => 'Checkin',
    ),
    'hid_profiles_list' => array(
      'category' => 'Contacts by HID',
      'title' => 'Contacts',
    ),

    // Documents.
    'documents' => array(
      'category' => 'Content by HR.info',
      'title' => 'Dynamic documents',
    ),
    'hr_documents' => array(
      'category' => 'Content by HR.info',
      'title' => 'Documents',
    ),
    'hr_documents_key_documents' => array(
      'category' => 'Content by HR.info',
      'title' => 'Static documents',
    ),
    'hr_layout_standard' => array(
      'category' => 'Content by HR.info',
      'title' => 'Response Planning/OCHA products',
    ),

    // Old events.
    'events' => array(
      'category' => 'Content by HR.info',
      'title' => 'HR.Info events',
    ),

    // Events.
    'ev_events_upcoming' => array(
      'category' => 'Events by<br>Humanitarian Events',
      'title' => 'Dynamic events',
    ),
    'ev_events_meeting_minutes' => array(
      'category' => 'Events by<br>Humanitarian Events',
      'title' => 'Meeting minutes',
    ),

    // Infographics.
    'infographics' => array(
      'category' => 'Content by HR.info',
      'title' => 'Dynamic maps/infographics',
    ),
    'hr_infographics' => array(
      'category' => 'Content by HR.info',
      'title' => 'Infographics',
    ),
    'hr_infographics_key_infographics' => array(
      'category' => 'Content by HR.info',
      'title' => 'Static maps/infographics',
    ),

    // Reliefweb.
    'hr_layout_reliefweb' => array(
      'category' => 'Outdated',
      'title' => 'ReliefWeb API',
    ),
    'hr_reliefweb_ocha_products' => array(
      'category' => 'Content by RW',
      'title' => 'Response Planning/OCHA products',
    ),
    'hr_reliefweb_key_documents' => array(
      'category' => 'Content by RW',
      'title' => 'Dynamic Reports and Maps',
    ),
    'hr_reliefweb_featured_document' => array(
      'category' => 'Content by RW',
      'title' => 'Static Reports and Maps',
    ),

    // FTS.
    'fts_visualization' => array(
      'category' => 'Funding by FTS',
      'title' => 'FTS Chart',
    ),

    // Assessments.
    'hr_assessments' => array(
      'category' => 'Content by HR.info',
    ),
    'assessments' => array(
      'category' => 'Content by HR.info',
    ),

    // New assessments.
    'ar_assessments_assessments' => array(
      'category' => 'Assessments by<br>Assessment Registry',
    ),
    'ar_assessments_key_assessments' => array(
      'category' => 'Assessments by<br>Assessment Registry',
    ),
    'ar_assessments_featured_assessments' => array(
      'category' => 'Assessments by<br>Assessment Registry',
    ),

    // Outdated.
    'bean_pane' => array(
      'category' => 'Outdated',
      'title' => 'Bean',
    ),
    'twitter' => array(
      'category' => 'Outdated',
    ),
    'additional features' => array(
      'category' => 'Outdated',
    ),
    'hr_news' => array(
      'category' => 'Outdated',
      'title' => 'News',
    ),
    'blog posts' => array(
      'category' => 'Outdated',
      'title' => 'Blog post',
    ),
  );

  $tag = '';
  if (variable_get('hr_core_debug_panel_categories', FALSE)) {
    if (isset($plugin['category'])) {
      if (is_array($plugin['category'])) {
        $tag .= '[' . $plugin['category'][0] . ']';
      }
      else {
        $tag .= '[' . $plugin['category'] . ']';
      }
    }
    if (isset($subtype['category'])) {
      if (is_array($subtype['category'])) {
        $tag .= '{' . $subtype['category'][0] . '}';
      }
      else {
        $tag .= '{' . $subtype['category'] . '}';
      }
    }
    $tag .= ' - ';
  }

  // Check views panes.
  if (isset($plugin['name']) && $plugin['name'] == 'views_panes') {
    if (is_array($subtype['category'])) {
      $key = strtolower($subtype['category'][0]);
      if (array_key_exists(t($key), $categories)) {
        $plugin['category'] = $categories[$key]['category'];
        $subtype['category'] = $categories[$key]['category'];
        if (isset($categories[$key]['title'])) {
          $subtype['title'] = $categories[$key]['title'];
          $plugin['title'] = $categories[$key]['title'];
        }
        else {
          $subtype['title'] = $tag . $subtype['title'];
          $plugin['title'] = $tag . $plugin['title'];
        }
        return;
      }
    }
  }

  // Check subtype.
  if (isset($subtype['category']) && isset($subtype['name'])) {
    if (!is_array($subtype['category'])) {
      if (array_key_exists($subtype['name'], $categories)) {
        $plugin['category'] = $categories[$subtype['name']]['category'];
        $subtype['category'] = $categories[$subtype['name']]['category'];
        if (isset($categories[$subtype['name']]['title'])) {
          $subtype['title'] = $categories[$subtype['name']]['title'];
          $plugin['title'] = $categories[$subtype['name']]['title'];
        }
        else {
          $subtype['title'] = $tag . $subtype['title'];
          $plugin['title'] = $tag . $plugin['title'];
        }
        return;
      }
    }
  }

  // Check plugin.
  if (isset($plugin['category']) && isset($plugin['name'])) {
    if (array_key_exists($plugin['name'], $categories)) {
      $plugin['category'] = $categories[$plugin['name']]['category'];
      $subtype['category'] = $categories[$plugin['name']]['category'];
      if (isset($categories[$plugin['name']]['title'])) {
        $subtype['title'] = $categories[$plugin['name']]['title'];
        $plugin['title'] = $categories[$plugin['name']]['title'];
      }
      else {
        $subtype['title'] = $tag . $subtype['title'];
        $plugin['title'] = $tag . $plugin['title'];
      }
      return;
    }
  }

  // Something old found.
  if (variable_get('hr_core_debug_panel_categories', FALSE)) {
    $subtype['title'] = $tag . $subtype['title'];
    $plugin['title'] = $tag . $plugin['title'];
  }
}

/**
 * Implements hook_boot().
 */
function hr_core_boot() {
  if (!extension_loaded('newrelic')) {
    return;
  }

  if ($GLOBALS['user']->uid) {
    newrelic_add_custom_parameter('hr_role', 'authenticated');
    newrelic_add_custom_parameter('hr_uid', $GLOBALS['user']->uid);
  }
  else {
    newrelic_add_custom_parameter('hr_role', 'anonymous');
    newrelic_add_custom_parameter('hr_uid', 0);
  }
}

/**
 * Implements hook_file_update().
 *
 * Avoid links from changing when a file is replaced. Taken from upload_replace module.
 */
function hr_core_file_update($new_file) {

  if (!$new_file->fid) {
    // Nothing to do if no file ID.
    return;
  }

  // Check scheme to not interfere with external files.
  $scheme = file_uri_scheme($new_file->uri);
  if (!($scheme == 'public' || $scheme == 'private')) {
    // Return if $scheme is not public or private because
    // then it is some other scheme like youtube or S3 etc.
    return;
  }

  $desired_destination = preg_replace('/_[0-9]+\.(.*)$/', '.$1', $new_file->uri);

  $db_path = db_select('file_managed', 'f')
    ->fields('f', array('uri'))
    ->condition('fid', $new_file->fid)
    ->execute()
    ->fetchAssoc();

  if ($db_path['uri'] != $new_file->uri) {

    // This happens when a revision is being reverted.
    $next_good_uri = file_destination($desired_destination, FILE_EXISTS_RENAME);
    db_update('file_managed')
      ->fields(array('uri' => $next_good_uri))
      ->condition('fid', $new_file->fid)
      ->execute();

    $new_file->uri = $desired_destination;
  }
  else {

    // If the filename has been modified by adding a _X value, or on certain
    // situations the URI will not match the URI in the DB, such as when
    // reverting a revision. When reverting a revision change the filename as
    // well.
    if (!strpos($new_file->uri, $new_file->filename)) {

      $is_blocked = FALSE;
      $blocking_file = NULL;
      $tmp_destination = '';

      // The filename is not in the URI, so Drupal must have added a "_X" before
      // the extension. Find the file that is blocking this file from keeping
      // the correct path.
      $result = db_select('file_managed', 'f')
        ->fields('f')
        ->condition('uri', $desired_destination)
        ->execute();
      // @todo Only one result is handled, should allow for multiple results.
      foreach ($result as $file) {
        $is_blocked = TRUE;
        $blocking_file = $file;
        $tmp_destination = file_directory_temp() . "/test_-" . $blocking_file->fid . "_-" . $blocking_file->filename;
      }

      $old_destination = $db_path['uri'];

      $t_message = 'The file %old could not be moved to %new';

      // Swap the files.
      if ($is_blocked) {
        // Move the blocking file to a temporary location.
        if (!file_unmanaged_move($desired_destination, $tmp_destination)) {
          drupal_set_message(t($t_message, array('%old' => $desired_destination, '%new' => $tmp_destination)), 'error');
          return;
        }

        // Move blocking file was successful, update the DB.
        db_update('file_managed')
          ->fields(array('uri' => $tmp_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }

      // Move the new file to the preferred location.
      if (!file_unmanaged_move($old_destination, $desired_destination)) {
        drupal_set_message(t($t_message, array('%old' => $old_destination, '%new' => $desired_destination)), 'error');
        return;
      }

      // Move new file was successful, update the DB.
      db_update('file_managed')
        ->fields(array('uri' => $desired_destination))
        ->condition('fid', $new_file->fid)
        ->execute();

      // Set the new file's path to the correct path.
      $new_file->uri = $desired_destination;

      if ($is_blocked) {

        // Move the older file from temp to the new _X location.
        if (!file_unmanaged_move($tmp_destination, $old_destination)) {
          drupal_set_message(t($t_message, array('%old' => $tmp_destination, '%new' => $old_destination)), 'error');
          return;
        }

        // Move blocking file was successful, update the DB with the actual
        // location after file copy, so we use tmp_destination as it was
        // updated during the move.
        db_update('file_managed')
          ->fields(array('uri' => $old_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
        // @todo Refactor to use file_save() so we don't need this.
        entity_get_controller('file')->resetCache(array($blocking_file->fid));
      }
    }
  }

  // Clear the generated image styles for this file.
  $query = "SELECT DISTINCT uri FROM {file_managed} WHERE fid=:fid";
  $uri = db_query($query, array(':fid' => $new_file->fid))->fetchField();
  image_path_flush($uri);
  if (isset($old_destination)) {
    image_path_flush($old_destination);
  }

  // @todo Refactor to use file_save() so we don't need this.
  entity_get_controller('file')->resetCache(array($new_file->fid));
}

/**
 * Implements hook_file_delete().
 *
 * Update the URI in the file object before deleting as we may have altered it
 * above.
 */
function hr_core_file_delete($file) {
  $file->uri = db_select('file_managed', 'f')
    ->fields('f', array('uri'))
    ->condition('f.fid', $file->fid)
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_query_TAG_alter()
 *
 * Allows filter by parent in the API.
 */
function hr_core_query_hr_core_filter_parent_alter($query) {
  $conditions = &$query->conditions();
  foreach ($conditions as &$condition) {
    if (is_array($condition) && $condition['field'] == 'taxonomy_term_data.' && is_numeric($condition['value'])) {
      $condition['field'] = 'th.parent';
      $query->join('taxonomy_term_hierarchy', 'th', 'taxonomy_term_data.tid = th.tid');
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function hr_core_entity_property_info_alter(&$entity_info) {
  $properties = &$entity_info['taxonomy_term']['properties'];
  $properties['created'] = array(
    'label' => t('Date created'),
    'description' => t('The date the term was posted.'),
    'type' => 'date',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('Date changed'),
    'description' => t('The date the term was most recently updated.'),
    'type' => 'date',
    'schema field' => 'changed',
  );
}

/**
 * Implements hook_node_validate()
 *
 * Makes sure clusters, operations and offices have an English translation.
 */
function hr_core_node_validate($node, $form, &$form_state) {
  $node_types = array('hr_bundle', 'hr_operation', 'hr_office');
  $node_labels = array(
    'hr_bundle' => t('Cluster'),
    'hr_operation' => t('Operation'),
    'hr_office' => t('Office')
  );
  if (in_array($node->type, $node_types) && $node->language !== 'en') {
    // Make sure the node has an English translation.
    $tnid = $node->tnid;
    if ($tnid) {
      $translations = translation_node_get_translations($tnid);
      $languages = array_keys($translations);
      if (!in_array('en', $languages)) {
        form_set_error($form['language']['#name'], t('This @label must have an English translation', array(
          '@label' => $node_labels[$node->type]
        )));
      }
    }
    else {
      form_set_error($form['language']['#name'], t('This @label must have an English translation', array(
        '@label' => $node_labels[$node->type]
      )));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 *
 * Makes sure organizations have an English translation.
 */
function hr_core_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

  if ((!isset($form_state['input']['op']) || $form_state['input']['op'] != 'Delete')) {
    $form['#validate'][] = 'hr_core_validate_organization';
  }
}

/**
 * Implements _form_validate() for taxonomy_form_term().
 *
 * Makes sure an organization can not be added without an English translation.
 */
function hr_core_validate_organization($form, &$form_state) {
  global $language;
  $vid = $form_state['values']['vid'];
  $tid = $form_state['values']['tid'];
  if ($vid == 1 && !$tid && $language->language != 'en') {
    form_set_error($form['name']['#name'], t('This organization must have an English translation'));
  }
}

/**
 * Implements hook_schema_alter().
 */
function hr_core_schema_alter(&$schema) {
  // Force field_geofield_geom to LONGBLOB.
  if (isset($schema['field_data_field_geofield'])) {
    $schema['field_data_field_geofield']['fields']['field_geofield_geom']['type'] = 'blob';
    $schema['field_data_field_geofield']['fields']['field_geofield_geom']['size'] = 'big';
  }

  // Force field_geofield_geom to LONGBLOB.
  if (isset($schema['field_revision_field_geofield'])) {
    $schema['field_revision_field_geofield']['fields']['field_geofield_geom']['type'] = 'blob';
    $schema['field_revision_field_geofield']['fields']['field_geofield_geom']['size'] = 'big';
  }

  // User name length 254.
  if (isset($schema['users'])) {
    $schema['users']['fields']['name']['length'] = 254;
  }
}
