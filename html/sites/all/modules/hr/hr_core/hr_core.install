<?php

/**
 * @file
 * Install file for hr_core.
 */

/**
 * Uninstall multisite redirect module.
 */
function hr_core_update_7001() {
  // We need to handle the top redirects using the redirect module instead.
  $query = db_select('multisite_redirect')
    ->fields('multisite_redirect', array('source_site', 'redirect'))
    ->condition('source_path', '<front>');
  $result = $query->execute();
  $base_fields = $result->fetchAllKeyed();

  $query = db_select('multisite_redirect')
    ->fields('multisite_redirect', array(
      'source_site',
      'source_path',
      'redirect',
    ))
    ->condition('source_path', '<front>', '<>')
    ->condition('access', '1429351251', '>')
    ->condition('count', 5, '>');
  $result = $query->execute();
  $redirects = $result->fetchAll();

  $languages = language_list();

  foreach ($redirects as $redirect) {
    $source_site = _hr_core_install_remove_language_url($languages, urldecode($base_fields[$redirect->source_site]));

    if ($source_site_path = drupal_lookup_path('source', $source_site)) {
      $source = $source_site_path . '/' . urldecode($redirect->source_path);
    }
    else {
      $source = $source = $source_site . '/' . urldecode($redirect->source_path);
    }

    $destination = _hr_core_install_remove_language_url($languages, urldecode($redirect->redirect));
    if ($dest_path = drupal_lookup_path('source', $destination)) {
      $destination = $dest_path;
    }
    $redirect = new stdClass();

    redirect_object_prepare(
      $redirect,
      array(
        'source' => $source,
        'source_options' => array(),
        'redirect' => $destination,
        'redirect_options' => array(),
        'language' => LANGUAGE_NONE,
      )
    );

    $hash = redirect_hash($redirect);
    $existing = redirect_load_by_hash($hash);
    if (!$existing) {
      redirect_save($redirect);
    }

  }
  redirect_page_cache_clear();

  if (module_exists('multisite_redirect')) {
    variable_del('multisite_redirect_primary_site');
    variable_del('multisite_redirect_exclusions');
    module_disable(array('multisite_redirect'));
    drupal_uninstall_modules(array('multisite_redirect'));
  }
}

/**
 * Helper function to remove the language from the front of the string.
 */
function _hr_core_install_remove_language_url($languages, $string) {
  // We need to clean out the language from the urls.
  foreach ($languages as $key => $language) {
    if (strpos($string, $key) === 0) {
      return str_replace($key . '/', '', $string);
    }
  }
  return $string;
}

/**
 * Enable elysia cron and set cron runs to 1h.
 */
function hr_core_update_7002() {
  module_enable(array('elysia_cron'));
  variable_set('cron_safe_threshold', 60);
}

/**
 * Enable entitycache.
 */
function hr_core_update_7003() {
  if (!module_exists('entitycache')) {
    module_enable(array('entitycache'));
  }
}

/**
 * Enable environment indicator.
 */
function hr_core_update_7004() {
  if (!module_exists('environment_indicator')) {
    module_enable(array('environment_indicator'));
  }

  // Disable git branch support.
  variable_set('environment_indicator_git_support', FALSE);

  // Add staging.
  if (!ctools_export_crud_load('environment_indicator_environment', 'hr_test')) {
    $environment = ctools_export_crud_new('environment_indicator_environment', TRUE);
    $environment->api_version = 1;
    $environment->disabled = FALSE;
    $environment->machine = 'hr_test';
    $environment->name = t('HR Test');
    $environment->regexurl = 'hrtest.568elmp02.blackmesh.com';
    $environment->settings = array(
      'color' => '#146205',
      'text_color' => '#ffffff',
      'weight' => 99,
      'position' => 'top',
      'fixed' => FALSE,
    );

    ctools_export_crud_save('environment_indicator_environment', $environment);
  }

  // Add production.
  if (!ctools_export_crud_load('environment_indicator_environment', 'hr_info')) {
    $environment = ctools_export_crud_new('environment_indicator_environment', TRUE);
    $environment->api_version = 1;
    $environment->disabled = FALSE;
    $environment->machine = 'hr_info';
    $environment->name = t('HR Live');
    $environment->regexurl = 'www.humanitarianresponse.info';
    $environment->settings = array(
      'color' => '#0c17c1',
      'text_color' => '#ffffff',
      'weight' => 99,
      'position' => 'top',
      'fixed' => FALSE,
    );

    ctools_export_crud_save('environment_indicator_environment', $environment);
  }
}

/**
 * Change the hostname on the staging site environment indicator.
 */
function hr_core_update_7005() {
  // Update staging.
  $environment = ctools_export_crud_load('environment_indicator_environment', 'hr_test');
  $environment->regexurl = 'hrinfo.568elmp03.blackmesh.com';
  ctools_export_crud_save('environment_indicator_environment', $environment);
}

/**
 * Enable node clone module.
 */
function hr_core_update_7006() {
  module_enable(array('clone'));
}

/**
 * Enable field_extrawidgets module.
 */
function hr_core_update_7007() {
  module_enable(array('field_extrawidgets'));
}

/**
 * Fix panels caching.
 */
function hr_core_update_7008() {
  _hr_core_pane_cache_content_by_type('hr_documents_key_documents', '', 'hr_document');
  _hr_core_pane_cache_content_by_type('hr_infographics_key_infographics', '', 'hr_infographic');
  _hr_core_pane_cache_content_by_type('hr_contacts_key_contacts', '', 'hr_contact');

  _hr_core_pane_cache_content_by_type('views_panes', 'hr_documents_panes-list', 'hr_document');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_documents_panes-mm_from_context', 'hr_document');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_documents_panes-documents_from_context', 'hr_document');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_documents_panes-thumbnail', 'hr_document');

  _hr_core_pane_cache_content_by_type('views_panes', 'hr_assessments_panes-panel_pane_1', 'hr_assessment');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_assessments_panes-list', 'hr_assessment');

  _hr_core_pane_cache_content_by_type('views_panes', 'hr_infographics_panes-infographics_from_context', 'hr_infographic');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_infographics_panes-list', 'hr_infographic');

  _hr_core_pane_cache_content_by_type('views_panes', 'hr_events_panes-upcoming', 'hr_event');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_events_panes-upcoming_from_context', 'hr_event');

  _hr_core_pane_cache_content_by_type('views_panes', 'hr_news_panes-list', 'hr_news');
  _hr_core_pane_cache_content_by_type('views_panes', 'hr_contacts_panes-list', 'hr_contact');

  _hr_core_pane_cache_content_by_type('hr_layout_standard', '', 'hr_document');
}

/**
 * Fix panels caching - part 2.
 */
function hr_core_update_7009() {
  _hr_core_pane_cache_simple('hr_layout_reliefweb');
  _hr_core_pane_cache_simple('hid_profiles_list');
  _hr_core_pane_cache_simple('hr_layout_rss_feeds');
  _hr_core_pane_cache_simple('twitter', '', 60);
  _hr_core_pane_cache_simple('bean_pane', 'fts_visualization', 60);
  _hr_core_pane_cache_simple('bean_pane', 'existing_bean');
  _hr_core_pane_cache_simple('block', 'j2h-j2h_4w', 60);
}

/**
 * Fix panels caching - displays.
 */
function hr_core_update_7010() {
  _hr_core_display_cache_content(15);
}

/**
 * Fix panels caching - displays user role.
 */
function hr_core_update_7011() {
  _hr_core_display_cache_content(15);
}

/**
 * Disable discussions and comments.
 */
function hr_core_update_7012() {
  module_disable(array(
    'hr_discussions',
    'comment_og',
    'comment',
  ));
}

/**
 * Fix panels caching - displays user role.
 */
function hr_core_update_7013() {
  _hr_core_display_cache_content(15);
}

/**
 * Switch to HR caching.
 */
function hr_core_update_7014() {
  module_enable(array('hr_panels_cache'));
  hr_core_update_7008();
  hr_core_update_7013();
  module_disable(array(
    'panels_content_cache',
  ));
}

/**
 * Set caching by content type.
 */
function hr_core_update_7015() {
  foreach (node_type_get_names() as $type => $name) {
    _hr_core_display_cache_content_defaults('none', $margin = 5, $type);
  }
}

/**
 * Enable environment indicator for new test sites.
 */
function hr_core_update_7016() {
  // Add assessmentregistry.
  if (!ctools_export_crud_load('environment_indicator_environment', 'hr_assessmentregistry')) {
    $environment = ctools_export_crud_new('environment_indicator_environment', TRUE);
    $environment->api_version = 1;
    $environment->disabled = FALSE;
    $environment->machine = 'hr_assessmentregistry';
    $environment->name = t('HR Assessment Registry');
    $environment->regexurl = 'assessmentregistry.hrinfo.568elmp03.blackmesh.com';
    $environment->settings = array(
      'color' => '#a40071',
      'text_color' => '#ffffff',
      'weight' => 90,
      'position' => 'top',
      'fixed' => FALSE,
    );

    ctools_export_crud_save('environment_indicator_environment', $environment);
  }

  // Add indicatorregistry.
  if (!ctools_export_crud_load('environment_indicator_environment', 'hr_indicatorregistry')) {
    $environment = ctools_export_crud_new('environment_indicator_environment', TRUE);
    $environment->api_version = 1;
    $environment->disabled = FALSE;
    $environment->machine = 'hr_indicatorregistry';
    $environment->name = t('HR Indicator Registry');
    $environment->regexurl = 'indicatorregistry.hrinfo.568elmp03.blackmesh.com';
    $environment->settings = array(
      'color' => '#017585',
      'text_color' => '#ffffff',
      'weight' => 91,
      'position' => 'top',
      'fixed' => FALSE,
    );

    ctools_export_crud_save('environment_indicator_environment', $environment);
  }

  // Update staging, ensure the regex only matches the main test environment.
  $environment = ctools_export_crud_load('environment_indicator_environment', 'hr_test');
  $environment->regexurl = '^(www.)?hrinfo.568elmp03.blackmesh.com';
  ctools_export_crud_save('environment_indicator_environment', $environment);

  // Update default, since the first regex match is applied. This should always be listed last.
  $environment = ctools_export_crud_load('environment_indicator_environment', 'default_environment');
  $environment->settings['weight'] = 100;
  ctools_export_crud_save('environment_indicator_environment', $environment);
}

/**
 * Set caching by content type, add context.
 */
function hr_core_update_7017() {
  foreach (node_type_get_names() as $type => $name) {
    _hr_core_display_cache_content_defaults('none', $margin = 5, $type);
  }
}

/**
 * Enable the search_api_solr_overrides module.
 */
function hr_core_update_7018() {
  module_enable(array('search_api_solr_overrides'));
}

/**
 * Fix panels allowed types.
 */
function hr_core_update_7019() {
  $allowed = array();
  $allowed_types = db_select('panels_allowed_types', 'pat')
    ->fields('pat', array('module', 'type', 'allowed'))
    ->condition('allowed', 1)
    ->execute()
    ->fetchAll();

  foreach ($allowed_types as $allowed_type) {
    if (!isset($allowed[$allowed_type->module])) {
      $allowed[$allowed_type->module] = array();
    }
    $allowed[$allowed_type->module][$allowed_type->type] = $allowed_type->allowed;
  }

  foreach ($allowed as $module => $data) {
    variable_set($module . '_allowed_types', $data);
  }
}

/**
 * Enable private_content_export.
 */
function hr_core_update_7020() {
  module_enable(array('private_content_export'));
}

/**
 * Switch to OgHRCoreSelectionHandler.
 */
function hr_core_update_7021() {
  foreach (field_info_fields() as $field_info) {
    if (isset($field_info['settings']['handler']) && $field_info['settings']['handler'] === 'og') {
      $field_info['settings']['handler'] = 'og_hr_core';
      field_update_field($field_info);
    }
  }
}

/**
 * Switch to RefHRCoreSelectionHandler.
 */
function hr_core_update_7022() {
  foreach (field_info_fields() as $field_info) {
    if (isset($field_info['settings']['handler']) && $field_info['settings']['handler'] === 'base') {
      $field_info['settings']['handler'] = 'ref_hr_core';
      field_update_field($field_info);
    }
  }
}

/**
 * Disable Mollom.
 */
function hr_core_update_7023() {
  module_disable(array('mollom'));
}

/**
 * Disable contacts.
 */
function hr_core_update_7024() {
  module_disable(array('hr_contacts'));
}

/**
 * Disable webforms.
 */
function hr_core_update_7025() {
  // Delete webforms.
  $results = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'webform')
    ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }
  if (!empty($nids)) {
    node_delete_multiple($nids);
    drupal_set_message(t('%count nodes has been deleted.', array(
      '%count' => count($nids),
    )));
  }

  // Disable modules.
  module_disable(array('hr_webforms', 'webform'));

  // Delete content type.
  if (node_type_load('webform')) {
    node_type_delete('webform');
    drupal_set_message(t('Webform content type has been deleted.'));
  }

  node_types_rebuild();
  menu_rebuild();
}

/**
 * Revert hr_bundles view.
 */
function hr_core_update_7026() {
  $view = views_get_view('hr_bundles');
  if ($view->type == t('Overridden')) {
    views_revert_view($view);
  }
}

/**
 * Enable the facetapi_bonus module.
 */
function hr_core_update_7027() {
  module_enable(array('facetapi_bonus'));
}

/**
 * Enable taxonomy_creation_date.
 */
function hr_core_update_7028() {
  module_enable(array('taxonomy_creation_date'));
}

/**
 * Update created and changed data of all terms.
 */
function hr_core_update_7029() {
  // At least 30 days ago.
  $now = REQUEST_TIME - 2592000;
  db_query('UPDATE {taxonomy_term_data} set created = floor(:now - random() * 2592000)', array(
    ':now' => (int) $now,
  ));
  db_query('UPDATE {taxonomy_term_data} set changed = created');
}

/**
 * Perform the hybridauth migration.
 */
function hr_core_update_7030() {
  module_enable(array('hybridauth'));
  $results = db_select('hid_profiles', 'h')
    ->fields('h')
    ->execute()
    ->fetchAll();

  foreach ($results as $row) {
    $identity = array();
    $identity['provider'] = 'HumanitarianId';
    $identity['identifier'] = $row->hid;
    _hybridauth_identity_save($identity, $row->uid);
  }
  module_disable(array('hid_auth'));
}

/**
 * Remove the trusted role.
 */
function hr_core_update_7031() {
  user_role_delete('trusted');
  module_disable(array(
    'hr_translations',
    'tmgmt_local',
    'tmgmt_entity_ui',
    'tmgmt_i18n_string',
    'tmgmt_entity',
    'tmgmt_language_combination',
    'tmgmt_field',
    'tmgmt_ui',
    'tmgmt',
  ));
  user_role_delete('translator');
}

/**
 * Set modified = 0 to node_types to allow for translated names.
 */
function hr_core_update_7032() {
  db_update('node_type')
    ->fields(array(
    'modified' => 0
  ))
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Enable custom ocha_basic theme, install modernizr, revert sitewide context
 * and search-related views exposed filters block contexts, enable footer_menu
 * feature.
 */
function hr_core_update_7033() {
  variable_set('theme_default', 'ocha_basic');

  $modules = array('modernizr', 'footer_menu');
  module_enable($modules);

  features_revert(array(
    'hr_layout' => array(
      'context',
    ),
    'hr_infographics' => array(
      'context',
    ),
    'hr_assessments' => array(
      'context',
    ),
    'hr_indicators' => array(
      'context',
    ),
    'hr_reliefweb' => array(
      'context',
    ),
    'hr_documents' => array(
      'context',
    ),
    'hr_search' => array(
      'context',
    ),
    'hr_datasets' => array(
      'context',
    ),
    'hr_news' => array(
      'context',
    ),
    'hr_events' => array(
      'context',
    ),
  ));
}

/**
 * Revert sitewide context to include hr_layout_create_links block.
 */
function hr_core_update_7034() {
  features_revert(array(
    'hr_layout' => array(
      'context',
    )
  ));
}

/**
 * HRINFO-918 - Migrate assessment accessibility values to new values.
 */
function hr_core_update_7035() {
  db_update('field_data_field_asst_accessibility')
    ->fields(array(
      'field_asst_accessibility_value' => 'Available on Request'
    ))
    ->condition('field_asst_accessibility_value', 'Restricted Distribution')
    ->execute();

  db_update('field_data_field_asst_accessibility')
    ->fields(array(
      'field_asst_accessibility_value' => 'Not Available'
    ))
    ->condition('field_asst_accessibility_value', 'Not Applicable')
    ->execute();
}

/**
 * OPS-4930 - Remove bad node.
 */
function hr_core_update_7036() {
  db_delete('node')
    ->condition('nid', 177189)
    ->execute();
}

/**
 * Rename users.
 */
function hr_core_update_7037() {
  db_query("UPDATE {users} SET name = 'chakowa - INVALID' WHERE uid = 2087;");
  db_query("UPDATE {users} SET name = 'caroline.teyssier - INVALID' WHERE uid = 273;");
}

/**
 * Rename files.
 */
function hr_core_update_7038() {
  db_query("UPDATE {file_managed} SET uri = 'public://Hesper Scale Presentation - INVALID' WHERE fid = 2206;");
  db_query("UPDATE {file_managed} SET uri = 'public://Humanitarian Dashboard - INVALID' WHERE fid = 2208;");
  db_query("UPDATE {file_managed} SET uri = 'public://20 November Myanmar Humanitarian Dashboard - INVALID' WHERE fid = 2286;");
  db_query("UPDATE {file_managed} SET uri = 'public://Methodologie Evaluations Rapides - INVALID' WHERE fid = 2249;");
}

/**
 * Enable migrate module.
 */
function hr_core_update_7039() {
  module_enable(array('dbtng_migrator'));
}

/**
 * Enable autocomplete_limit module.
 */
function hr_core_update_7040() {
  module_enable(array('autocomplete_limit'));
}

/**
 * Force path auto on location terms.
 */
function hr_core_update_7041() {
  if ($location = taxonomy_vocabulary_machine_name_load('hr_location')) {
    $sql = "update {pathauto_state} p, {taxonomy_term_data} t set p.pathauto = 1 where p.entity_id = t.tid and t.vid = :vid and p.pathauto = 0 and p.entity_type = 'taxonomy_term'";
    db_query($sql, array(
      ':vid' => $location->vid,
    ));
  }
}

/**
 * Update the path for location terms.
 */
function hr_core_update_7042(&$sandbox) {
  $location = taxonomy_vocabulary_machine_name_load('hr_location');
  $sandbox['#finished'] = FALSE;

  if (!isset($sandbox['progress'])) {
    $sandbox['count'] = (float) 0;
    $sandbox['max'] = 100;
    $sandbox['current'] = 0;
  }

  $query = db_select('taxonomy_term_data', 'td');
  $query->leftJoin('url_alias', 'ua', "CONCAT('taxonomy/term/', td.tid) = ua.source");
  $query->addField('td', 'tid');
  $query->isNull('ua.source');
  $query->condition('td.tid', $sandbox['current'], '>');
  $query->condition('td.vid', $location->vid);
  $query->orderBy('td.tid');
  $query->addTag('pathauto_bulk_update');
  $query->addMetaData('entity', 'taxonomy_term');
  $query->range(0, 25);
  $tids = $query->execute()->fetchCol();

  if (!empty($tids)) {
    pathauto_taxonomy_term_update_alias_multiple($tids, 'bulkupdate');
    $sandbox['count'] += count($tids);
    $sandbox['current'] = max($tids);
  }
  else {
    $sandbox['#finished'] = TRUE;
  }
}
