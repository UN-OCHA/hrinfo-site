<?php
/**
 * @file
 * Allow to choose which roles a group administrator can give to other members
 */

/**
 * Implements hook_og_permission().
 *
 * Add view/ edit permissions to all existing fields.
 */
function og_role_delegate_og_permission() {
  $perms = array();

  foreach (og_get_all_group_bundle() as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $name) {
      $roles = og_roles($entity_type, $bundle);
      foreach ($roles as $rid => $role) {
        if (in_array($role, array('non-member', 'member'))) {
          continue;
        }

        $perm = 'assign ' . $role . ' role';
        $perms[$perm] = array(
          'title' => t('Assign @role role', array('@role' => $role)),
          'description' => t('Assign the %role role to the group members.', array('%role' => $role)),
          'roles' => array(OG_AUTHENTICATED_ROLE),
          'default role' => array(
            OG_ADMINISTRATOR_ROLE,
          ),
          'module' => 'og_role_delegate',
        );
      }
    }
  }

  return $perms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide permissions related to roles not available in this context.
 */
function og_role_delegate_form_og_ui_admin_global_permissions_alter(&$form, &$form_state, $form_id) {
  $roles = og_roles($form['group_type']['#value'], $form['bundle']['#value'], $form['gid']['#value']);

  foreach ($form['permission'] as $perm_name => $element) {
    if (preg_match('#^assign (.*?) role$#i', $perm_name)) {
      $role_name = preg_replace('#^assign (.*?) role$#i', '$1', $perm_name);
      if (!in_array($role_name, $roles)) {
        unset($form['permission'][$perm_name]);
        foreach ($form['checkboxes'] as $cid => $element) {
          unset($form['checkboxes'][$cid]['#options'][$perm_name]);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function og_role_delegate_form_og_ui_admin_permissions_alter(&$form, &$form_state, $form_id) {
  og_role_delegate_form_og_ui_admin_global_permissions_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove roles the user does not have permission to assign from the
 * og_user_roles_action form.
 */
function og_role_delegate_form_views_form_og_members_admin_default_alter(&$form, &$form_state, $form_id) {
  $parts = explode('/', substr($form['#action'], 1));
  _og_role_delegate_alter_og_user_roles_action_form($form, $parts[1], $parts[2]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove roles the user does not have permission to assign from the add members
 * to the group form.
 */
function og_role_delegate_form_og_ui_add_users_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['og_user']['roles'])) {
    foreach ($form['og_user']['roles']['#options'] as $rid => $role) {
      if (!og_user_access($form['group_type']['#value'], $form['gid']['#value'], 'assign ' . $role . ' role')) {
        unset($form['og_user']['roles']['#options'][$rid]);
      }
    }
  }
}

/**
 * Helper to use to remove roles from a form using og_user_roles_action_form.
 *
 * It has been created to help developpers
 */
function _og_role_delegate_alter_og_user_roles_action_form(&$form, $group_type, $gid) {
  if (!empty($form['add_roles'])) {
    foreach ($form['add_roles']['#options'] as $rid => $role) {
      if (!og_user_access($group_type, $gid, 'assign ' . $role . ' role')) {
        unset($form['add_roles']['#options'][$rid]);
        unset($form['remove_roles']['#options'][$rid]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove roles the user does not have permission to assign from the edit
 * membership form.
 */
function og_role_delegate_form_og_ui_edit_membership_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['og_user']['roles'])) {
    foreach ($form['og_user']['roles']['#options'] as $rid => $role) {
      if (!og_user_access($form['group_type']['#value'], $form['gid']['#value'], 'assign ' . $role . ' role')) {
        if (!in_array($rid, $form['og_user']['roles']['#default_value'])) {
          unset($form['og_user']['roles']['#options'][$rid]);
        }
        else {
          $form['og_user']['roles'][$rid]['#disabled'] = TRUE;
        }
      }
    }
    $form['og_user']['roles']['#element_validate'][] = '_og_role_delegate_og_user_roles_element_validate';
  }
}

/**
 * Ensure that disabled checkboxes keep their values to avoid roles to be lost.
 */
function _og_role_delegate_og_user_roles_element_validate($element, &$form_state, $form) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  foreach ($values as $rid => $active) {
    if (!empty($element[$rid]['#disabled']) && in_array($rid, $element['#default_value'])) {
      $values[$rid] = $rid;
    }
  }
  drupal_array_set_nested_value($form_state['values'], $element['#parents'], $values);
}
