<?php

/**
 * @file
 * Provides integration between the FTS API and the Visualization module.
 */


/**
 * Implements hook_bean_types_api_info().
 */
function fts_visualization_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */

function fts_visualization_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'fts_visualization') . '/plugins/bean';
  $plugins['fts_visualization'] = array(
    'label' => t('FTS Funding Status (Visualization)'),
    'description' => t('Display Funding Status Charts using Visualization.'),
    'handler' => array(
      'class' => 'FTSVisualizationBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
  );
  return $plugins;
}

/**
 * Helper function: get appeal options
 */
function _fts_visualization_get_appeal_options() {
  $appeals = fts_get_appeals();
  $appeals_options = array();
  foreach ($appeals as $id => $appeal) {
    $appeals_options[$id] = $appeal->title;
  }
  return $appeals_options;
}

/**
 * Helper function: get countries options
 */
function _fts_visualization_get_countries_options() {
  $countries = fts_get_countries();
  $countries_options = array();
  foreach ($countries as $iso3 => $country) {
    $countries_options[$iso3] = $country->name;
  }
  return $countries_options;
}

/**
 * Helper function: get cluster options by appeal
 */
function _fts_visualization_get_cluster_options_by_appeal($id) {
  $clusters = fts_get_clusters_by_appeal($id);
  $cluster_options = array();
  $cluster_options[] = '';
  foreach ($clusters as $cluster) {
    $cluster_options[$cluster->name] = $cluster->name;
  }
  return $cluster_options;
}

/**
 * Callback function
 */
function _fts_visualization_appeals_callback($form, $form_state) {
  return $form['settings']['cluster'];
}

/**
 * Helper function
 */
function _fts_visualization_get_country_data($appeal) {
  if (is_numeric($appeal)) {
    $appeal = fts_get_appeal($appeal);
    $data['financed'] = (int)$appeal->funding;
    $data['not_financed'] = (int)$appeal->current_requirements - (int)$appeal->funding;
    $data['total'] = $data['financed'] + $data['not_financed'];
    if((int)$data['total'] > 0){
      $data['financed_percentage'] = round($data['financed']/$data['total'] * 100);
    }
    else{
      $data['financed_percentage'] = 0;
    }
    $data['not_financed_percentage'] = 100 - $data['financed_percentage'];
    $data['label'] = $appeal->country;
  }
  else {
    $country = fts_get_country($appeal);
    $funding = fts_get_funding(array('country' => $appeal, 'year' => date('Y')));
    $total = (int)$funding->total;
    $data['financed'] = $total;
    $data['not_financed'] = 0;
    $data['total'] = $total;
    $data['financed_percentage'] = 100;
    $data['label'] = $country->name;
  }
  return $data;
}

/**
 * Get data series
 */
function _fts_visualization_get_data($settings) {
  extract($settings);
  // Bind countries and appeals
  $appeals = array_merge($appeals, $countries);
  $series = array();
  $categories = array();
  $data = array();
  $fields = array(
    'label' => array(
      'label' => t('Label'),
      'enabled' => FALSE,
    ),
  );
  $total = NULL;
  if (count($appeals) == 1) {
    $appeal = array_shift($appeals);
    // Get latest FTS data
    $appeal_data = _fts_visualization_get_country_data($appeal);
    $funding_data = array();
    if (!empty($groupby)) {
      if ($groupby != 'cluster') {
        $fields['financed'] = array(
          'label' => t('Funded'),
          'enabled' => TRUE,
        );
        $params = array();
        if (is_numeric($appeal)) {
          $params['appeal'] = $appeal;
        }
        else {
          $params['country'] = $appeal;
          $params['year'] = date('Y');
        }
        $params['groupby'] = $groupby;
        $funding = fts_get_funding($params);
        $groups = $funding->grouping->group;
        foreach ($groups as $group) {
          if (is_string($group->type)) {
            $data[$group->type]['label'] = $group->type;
            $data[$group->type]['financed'] = (int)$group->amount;
            $data[$group->type]['not_financed'] = 0;
            $data[$group->type]['total'] = (int)$group->amount;
            $data[$group->type]['financed_percentage'] = 100;
          }
        }
      }
      else {
        $fields['not_financed'] = array(
          'label' => t('Unmet Requirements'),
          'enabled' => TRUE,
        );
        $fields['financed'] = array(
          'label' => t('Funded'),
          'enabled' => TRUE,
        );
        $clusters = fts_get_clusters_by_appeal($appeal);
        foreach ($clusters as $cluster) {
          if (!empty($cluster->name)) {
            $data[$cluster->name]['label'] = $cluster->name;
            $data[$cluster->name]['financed'] = (int)$cluster->funding;
            $data[$cluster->name]['not_financed'] = (int)$cluster->current_requirement - (int)$cluster->funding;
            if ($data[$cluster->name]['not_financed'] < 0) {
              $data[$cluster->name]['not_financed'] = 0;
            }
            $data[$cluster->name]['total'] = (int)$cluster->current_requirement;
            if ($data[$cluster->name]['financed'] > 0 && $data[$cluster->name]['total'] > 0) {
              $data[$cluster->name]['financed_percentage'] = round(($data[$cluster->name]['financed']/$data[$cluster->name]['total']) * 100);
            }
            else {
              $data[$cluster->name]['financed_percentage'] = 0;
            }
            if ($data[$cluster->name]['not_financed'] > 0 && $data[$cluster->name]['total'] > 0) {
              $data[$cluster->name]['not_financed_percentage'] = round(($data[$cluster->name]['not_financed']/$data[$cluster->name]['total']) * 100);
            }
            else {
              $data[$cluster->name]['not_financed_percentage'] = 0;
            }
          }
        }
      }
      uasort($data, "_fts_visualization_sort_data");
    }
    else {
      if ($type == 'pie') {
        $fields['val'] = array(
          'label' => t('Value'),
          'enabled' => TRUE,
        );
        if (empty($cluster)) {
          $data = array(
            array('label' => 'Funded '.$appeal_data['financed_percentage'].'%', 'val' => $appeal_data['financed']),
            array('label' => 'Unmet Requirements '.$appeal_data['not_financed_percentage'].'%', 'val' => $appeal_data['not_financed']),
          );
          $total = $appeal_data['financed'] + $appeal_data['not_financed'];
        }
        else {
          $cluster_data = fts_get_cluster_by_appeal($appeal, $cluster);
          $funded = (int)$cluster_data->funding;
	  $unmet = (int)$cluster_data->current_requirement - (int)$cluster_data->funding;
          $funded_percentage = round(($funded / (int)$cluster_data->current_requirement) * 100);
          $not_funded_percentage = 100 - $funded_percentage;
          $data = array(
            array('label' => 'Funded '.$funded_percentage.'%', 'val' => $funded),
            array('label' => 'Unmet Requirements '.$not_funded_percentage.'%', 'val' => $unmet),
          );
          $total = (int)$cluster_data->current_requirement;
        }
      }
      else {
        if ($appeal_data['not_financed'] > 0) {
          $fields['not_financed'] = array(
            'label' => t('Unmet Requirements '.$appeal_data['not_financed_percentage']."%"),
            'enabled' => TRUE,
          );
        }
        $fields['financed'] = array(
          'label' => t('Funded '.$appeal_data['financed_percentage']."%"),
          'enabled' => TRUE,
        );
        if (empty($cluster)) {
          $label = $appeal_data['label'];
          $data[$label] = $appeal_data;
        }
        else {
          $cluster_data = fts_get_cluster_by_appeal($appeal, $cluster);
          $data[$cluster]['label'] = $cluster;
          $data[$cluster]['financed'] = (int)$cluster_data->funding;
          $data[$cluster]['not_financed'] = (int)$cluster_data->current_requirement - (int)$cluster_data->funding;
          $data[$cluster]['total'] = (int)$cluster_data->current_requirement;
          $data[$cluster]['financed_percentage'] = round(($data[$cluster]['financed'] / $data[$cluster]['total']) * 100);
          $data[$cluster]['not_financed_percentage'] = round(($data[$cluster]['not_financed'] / $data[$cluster]['total']) * 100);
        }
      }
    }
  }
  else {
    $fields['not_financed'] = array(
      'label' => t('Unmet Requirements'),
      'enabled' => TRUE,
    );
    $fields['financed'] = array(
      'label' => t('Funded'),
      'enabled' => TRUE,
    );
    foreach ($appeals as $appeal) {
      $fdata = _fts_visualization_get_country_data($appeal);
      $label = $fdata['label'];
      $data[$label]['label'] = $label;
      $data[$label]['financed'] = $fdata['financed'];
      $data[$label]['not_financed'] = $fdata['not_financed'];
      $data[$label]['total'] = $fdata['total'];
    }
    uasort($data, "_fts_visualization_sort_data");
  }
  return array('fields' => $fields, 'data' => $data, 'total' => $total);
}

function fts_visualization_render_chart($settings)
{
  $data  = _fts_visualization_get_data($settings);
  $options = array();
  $options['title'] = '';
  if ($settings['type'] == 'bar' && count($data['fields']) > 2) {
    // Invert the field order to set the colors properly
    $fields = array('label' => $data['fields']['label'], 'financed' => $data['fields']['financed'], 'not_financed' => $data['fields']['not_financed']);
    $data['fields'] = $fields;
  }
  $options['fields'] = $data['fields'];
  $options['data'] = $data['data'];
  $options['type'] = $settings['type'];
  $options['xAxis'] = array('labelField' => 'label');
  $options['highcharts']['plotOptions']['series']['stacking'] = 'normal';
  $options['highcharts']['plotOptions']['series']['tooltip']['pointFormat'] = '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>';
  $options['highcharts']['plotOptions']['bar']['dataLabels']['enabled'] = FALSE;
  $options['highcharts']['plotOptions']['pie']['dataLabels']['enabled'] = FALSE;
  $options['highcharts']['plotOptions']['pie']['showInLegend'] = TRUE;
  $options['highcharts']['plotOptions']['pie']['cursor'] = 'pointer';
  
  if ($settings['type'] == 'table') {
    return fts_visualization_render_table($options);
  }
  else {
    $render = array();
    $render[] = array(
      '#theme' => 'visualization',
      '#options' => $options
    );
    if (!is_null($data['total'])) {
      $render[] = array(
        '#markup' => '<p class="fts_visualization_total"><span class="fts_visualization_total_label">Total</span>: <span class="fts_visualization_total_value">$ '.number_format($data['total']).'</span></p>',
      );
    }
    return $render;
  }
}

function fts_visualization_render_table($options) {
  $label_field = $options['xAxis']['labelField'];
  $headers = array();
  $headers[] = $options['fields'][$label_field]['label'];
  foreach ($options['fields'] as $name => $field) {
    if ($name != $label_field && $field['enabled']) {
      $headers[] = $field['label'];
    }
  }
  
  $rows = array();
  foreach ($options['data'] as $data) {
    $row = array();
    $row[] = $data[$label_field];
    foreach ($options['fields'] as $name => $field) {
      if ($name != $label_field && $field['enabled']) {
        if (is_numeric($data[$name])) {
          $row[] = number_format($data[$name]);
        }
        else {
          $row[] = $data[$name];
        }
      }
    }
    $rows[] = $row;
  }
  
  return array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
}

/**
 * Sort data
 */
function _fts_visualization_sort_data($a, $b) 
{
	if ($a['total'] == $b['total']) 
	{
		return 0;
	}
	return ($a['total'] < $b['total']) ? 1 : -1;
}

