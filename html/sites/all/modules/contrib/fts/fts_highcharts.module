<?php

/**
 * @file
 * Provides integration between the FTS API and Highcharts graphs.
 */


/**
 * Implements hook_bean_types_api_info().
 */
function fts_highcharts_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function fts_highcharts_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'fts_highcharts') . '/plugins/bean';
  $plugins['fts_highcharts'] = array(
    'label' => t('FTS Funding Status (Deprecated)'),
    'description' => t('Display Funding Status Charts using Highcharts.'),
    'handler' => array(
      'class' => 'FTSHighchartsBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
  );
  return $plugins;
}

/**
 * Helper function
 */
function _fts_highcharts_get_country_data($appeal) {
  if (is_numeric($appeal)) {
    $appeal = fts_get_appeal($appeal);
    $data['financed'] = (int)$appeal->funding;
    $data['not_financed'] = (int)$appeal->current_requirements - (int)$appeal->funding;
    $data['total'] = $data['financed'] + $data['not_financed'];
    $data['label'] = $appeal->country;
  }
  else {
    $funding = fts_get_funding(array('country' => $appeal, 'year' => date('Y')));
    $total = (int)$funding->total;
    $data['financed'] = $total;
    $data['not_financed'] = 0;
    $data['total'] = $total;
    $data['label'] = $appeal;
  }
  return $data;
}

/**
 * Get data series
 */
function _fts_highcharts_get_data($settings) {
  extract($settings);
  // Get appeals
  $appeals = explode(',', $appeal);
  $series = array();
  $categories = array();
  $data = array();
  if (count($appeals) == 1) {
    // Get latest FTS data
    $appeal_data = _fts_highcharts_get_country_data($appeal);
    $funding_data = array();
    if (!empty($groupby)) {
      $params = array();
      if (is_numeric($appeal)) {
        $params['appeal'] = $appeal;
      }
      else {
        $params['country'] = $appeal;
        $params['year'] = date('Y');
      }
      $params['groupby'] = $groupby;
      $funding = fts_get_funding($params);
      $groups = $funding->grouping->group;
      foreach ($groups as $group) {
        if (is_string($group->type)) {
          $data[$group->type]['funding'] = (int)$group->amount;
        }
      }
      
      if ($groupby == 'cluster') {
        $data_clusters = array();
        $clusters = fts_get_clusters_by_appeal($appeal);
        foreach ($clusters as $cluster) {
          if (!empty($cluster->name)) {
            $data[$cluster->name]['cluster'] = (int)$cluster->current_requirement - (int)$cluster->funding;
            if ($data[$cluster->name]['cluster'] < 0) {
              $data[$cluster->name]['cluster'] = 0;
            }
            $data[$cluster->name]['total'] = $data[$cluster->name]['cluster'] + (int)$cluster->funding;
          }
        }
      }
    }
    else {
      $funding_data[] = array('Financed', $appeal_data['financed']);
      if ($type != 'bar' && empty($groupby)) {
        $funding_data[] = array('Unmet requirements', $appeal_data['not_financed']);
      }
    }
    
    if ($groupby == 'cluster') {
      uasort($data, "_fts_highcharts_sort_data");
    }
    
    foreach ($data as $name => $values) {
      $funding_data[] = array($name, $values['funding']);
      if ($groupby == 'cluster') {
        $cluster_data[] = array($name, $values['cluster']);
      }
      $categories[] = $name;
    }
    
    if ($groupby == 'cluster') {
      $serie = new stdClass();
      $serie->id = 'unmet';
      $serie->name = t('Unmet requirements');
      $serie->data = $cluster_data;
      $series[] = $serie;
    }
    
    if ($type == 'bar' && empty($groupby)) {
      $categories[] = $appeal_data['label'];
      if ($appeal_data['not_financed'] > 0) {
        $serie = new stdClass();
        $serie->id = 'unmet';
        $serie->name = t('Unmet requirements');
        $serie->data = array(array('Unmet', $appeal_data['not_financed']));
        $series[] = $serie;
      }
    }
    
    $serie = new stdClass();
    $serie->id = 'financed';
    $serie->name = t('Financed');
    $serie->data = $funding_data;
    $series[] = $serie;
  }
  else {
    foreach ($appeals as $appeal) {
      $fdata = _fts_highcharts_get_country_data($appeal);
      $label = $fdata['label'];
      $data[$label]['financed'] = $fdata['financed'];
      $data[$label]['not_financed'] = $fdata['not_financed'];
      $data[$label]['total'] = $fdata['total'];
    }
    uasort($data, "_fts_highcharts_sort_data");
    $financed_data = array();
    $not_financed_data = array();
    foreach ($data as $name => $values) {
      $categories[] = $name;
      $financed_data[] = array($name, $values['financed']);
      $not_financed_data[] = array($name, $values['not_financed']);
    }
    $series[] = (object)array(
      'id' => 'unmet',
      'name' => t('Unmet requirements'),
      'data' => $not_financed_data,
    );
    $series[] = (object)array(
      'id' => 'financed',
      'name' => t('Financed'),
      'data' => $financed_data,
    );
  }
  return array('categories' => $categories, 'series' => $series);
}

/**
 * Render function
 */
function fts_highcharts_render($settings) {
  extract($settings);
  // Hack while we wait for a proper highcharts setting in the configuration
  variable_set('highcharts_exporting', 1);
  
  $data = _fts_highcharts_get_data($settings);
  
  $highcharts = new stdClass();
  switch ($type) {
    case 'bar':
      $highcharts = new HighchartsOptionsBarStacked();
      break;
    case 'pie':
      $highcharts = new HighchartsOptionsPieBasic();
      break;
  }
  
  $options = $highcharts->render();
  
  $options->xAxis->categories = $data['categories'];
  $options->chart->type = $type;
  $options->tooltip->formatter = '';
  
  // Title
  $options->title->text = '';
  
  // @todo Find a way to put this out of the module
  $series = $data['series'];
  foreach ($series as $serie) {
    if ($serie->name == t('Financed')) {
      $serie->color = '#3067BB';
    }
    elseif ($serie->name == t('Unmet requirements')) {
      $serie->color = '#D3D3D3';
    }
  }
  
  $options->series = $series;

  return $options;
}

/**
 * Sort data
 */
function _fts_highcharts_sort_data($a, $b) {
  if ($a['total'] == $b['total']) {
    return 0;
  }
  return ($a['total'] < $b['total']) ? 1 : -1;
}
