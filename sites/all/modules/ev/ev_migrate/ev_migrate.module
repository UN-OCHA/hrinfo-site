<?php
/**
 * @file
 * Code for Events migration API.
 */

/**
 * Implements hook_menu()
 */
function ev_migrate_menu() {
  $items = array();

  $items['ev-migrate/events/%/%/%'] = array(
    'title' => 'Events',
    'page callback' => 'ev_migrate_fetch_events',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access content'),
  );

  return $items;
}

function ev_migrate_fetch_events($page = 0, $timestamp = 0, $hash = '') {
  $page_size = 20;

  $shared_secret = variable_get('ev_migrate_shared_secret', 'ThisIsMySecret');
  if (md5($shared_secret . '_' . $page . '_' . $timestamp) != $hash) {
    drupal_access_denied();
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'hr_event', '=')
    ->propertyOrderBy('nid')
    ->range($page * $page_size, $page_size);
  $result = $query->execute();

  if (!isset($result['node'])) {
    drupal_not_found();
    return;
  }

  $nids = array_keys($result['node']);
  $events = node_load_multiple($nids);

  $data = array();
  foreach ($events as $event) {
    $row = array();
    try {
      $e = entity_metadata_wrapper('node', $event);

      $author = array(
        'name' => isset($e->author->value()->realname) ? $e->author->value()->realname : $e->author->name->value(),
        'email' => $e->author->mail->value(),
        'timezone' => $e->author->value()->timezone,
        'init' => $e->author->value()->init,
        'language' => $e->author->language->value(),
      );

      $row = array(
        'nid' => $e->getIdentifier(),
        'title' => $e->title_field->value(),
        'created' => $e->created->value(),
        'changed' => $e->changed->value(),
        'category' => $e->field_event_category->getIdentifier() ? $e->field_event_category->name->value() : '',
        'date' => $e->field_event_date[0]->value(),
        'address' => $e->field_address->value(),
        'location' => $e->field_location->getIdentifier() ? $e->field_location->name->value() : '',
        'description' => $e->body->raw(),
        'url' => url('node/' . $e->getIdentifier(), array('absolute' => TRUE)),
      );

      foreach ($e->field_themes as $theme) {
        $row['themes'][] = $theme->name->value();
      }

      foreach ($e->field_disasters as $disaster) {
        $row['disasters'][] = $disaster->title->value();
      }

      foreach ($e->field_organizations as $organization) {
        $row['organizations'][] = $organization->name->value();
      }

      foreach ($e->field_coordination_hubs as $coordination_hub) {
        $row['coordination_hubs'][] = $coordination_hub->title->value();
      }

      foreach ($e->field_bundles as $bundle) {
        $row['bundles'][] = $bundle->title->value();
      }

      foreach ($e->field_sectors as $sector) {
        $row['sectors'][] = $sector->title->value();
      }

      foreach ($e->field_event_agenda as $event_agenda) {
        if (isset($event_agenda->field_files_collection)) {
          foreach ($event_agenda->field_files_collection as $file) {
            $row['event_agenda'][] = array(
              'name' => $file->field_file->value()['filename'],
              'url' => file_create_url($file->field_file->value()['uri']),
            );
          }
        }
      }

      foreach ($e->field_event_meeting_minutes as $event_meeting_minute) {
        if (isset($event_meeting_minute->field_files_collection)) {
          foreach ($event_meeting_minute->field_files_collection as $file) {
            $row['event_meeting_minutes'][] = array(
              'name' => $file->field_file->value()['filename'],
              'url' => file_create_url($file->field_file->value()['uri']),
            );
          }
        }
      }

      $row['author'] = $author;
      $data[] = $row;
    } catch (Exception $e) {
      dpm($e->getMessage());
      watchdog('ev_migrate', 'Skipping node @title (@nid): @message', array(
        '@title' => $event->title,
        '@nid' => $event->nid,
        '@message' => $e->getMessage(),
      ));
    }
  }

  ev_migrate_json_output($data);
};

/**
 * Output as JSON.
 */
function ev_migrate_json_output($data) {
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  drupal_add_http_header('Access-Control-Allow-Methods', 'GET');
  drupal_json_output($data);
}
