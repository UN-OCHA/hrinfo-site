<?php
/**
 * @file
 * Code for Events import.
 */

/**
 * Wrapper around log function.
 */
function ev_import_log($message) {
  if (function_exists('drush_log')) {
    drush_log($message);
  }
  else {
    watchdog('Event import', $message);
  }
}

/**
 * Implements hook_cron().
 */
function ev_import_cron() {
  if (variable_get('ev_import_sync_from_hrinfo', FALSE)) {
    _ev_import_events_from_hrinfo();
  }
  if (variable_get('ev_import_sync_from_reliefweb', FALSE)) {
    _ev_import_events_from_reliefweb();
  }
}

/**
 * Sync from HRInfo.
 */
function _ev_import_events_from_hrinfo() {
  // HRInfo, reset every 7 days.
  $last_run = variable_get('ev_import_last_run_hrinfo', 0);
  if ((REQUEST_TIME - $last_run) >= 7 * 86400) {
    // Reset kill switch if needed.
    if (variable_get('ev_import_stop_processing_hrinfo', FALSE)) {
      variable_del('ev_import_stop_processing_hrinfo');
      variable_set('ev_import_page_hrinfo', 0);
    }
  }

  if (variable_get('ev_import_stop_processing_hrinfo', FALSE)) {
    return;
  }

  module_load_include('inc', 'ev_migrate', 'ev_migrate.hrinfo');

  // Migrate n batches.
  for ($i = 0; $i < variable_get('ev_import_num_of_runs', 10); $i++) {
    ev_import_events_from_hrinfo();
  }

  variable_set('ev_import_last_run_hrinfo', REQUEST_TIME);
}

/**
 * Migrate events.
 */
function ev_import_events_from_hrinfo() {
  $api_url = variable_get('ev_import_api_url_hrinfo', 'https://ocha:dev@events.staging.humanitarianresponse.info/events-to-hrinfo');

  // Get data.
  $request = drupal_http_request($api_url);
  if (isset($request->data)) {
    $data = drupal_json_decode($request->data);
    if (count($data)) {
      foreach ($data as $row) {
        ev_import_process_row_from_hrinfo($row);
      }
    }
  }
};

/**
 * Process event data.
 */
function ev_import_process_row_from_hrinfo($row) {
  ev_import_log('Migrating ' . $row['url']);

  // Make sure we have a user.
  $account = user_load_by_mail($row['author']['email']);
  if (!$account) {
    $account = drupal_anonymous_user();
  }

  // Create a new event.
  $event = new stdClass();
  $event->type = 'hr_event';
  $event->status = 1;
  node_object_prepare($event);

  $event->language = 'en';
  $event->uid = $account->uid;
  $event->status = TRUE;
  $event->promote = FALSE;
  $event->comment = FALSE;
  $event->log = 'Event imported from ' . $row['url'];
  $event->revision = TRUE;

  $event->title = $row['title'];

  $event->created = $row['created'];
  $event->changed = $row['changed'];

  $event->ev_import_created = $event->created;
  $event->ev_import_changed = $event->changed;

  $date_data = array();
  if (!empty($row['date']['rrule'])) {
    $field_info = field_info_field('field_event_date');
    // Double check date format used.
    if (strpos(date_type_format($field_info['type']), 'T') !== FALSE) {
      $row['date']['value'] = str_replace(' ', 'T', $row['date']['value']);
      $row['date']['value2'] = str_replace(' ', 'T', $row['date']['value2']);
    }
    else {
      $row['date']['value'] = str_replace('T', ' ', $row['date']['value']);
      $row['date']['value2'] = str_replace('T', ' ', $row['date']['value2']);
    }

    // Build all values.
    $date_data = date_repeat_build_dates($row['date']['rrule'], NULL, $field_info, $row['date']);
  }
  else {
    $date_data[0] = $row['date'];
  }

  $event->field_event_date[LANGUAGE_NONE] = $date_data;

  // Set body.
  if (isset($row['description']['safe_value'])) {
    $event->body['en'][] = array(
      'value' => $row['description']['safe_value'],
      'format' => 'panopoly_wysiwyg_text',
    );
  }

  // Set organic group.
  $event->og_group_ref['und'][0]['target_id'] = variable_get('ev_import_ethiopia_nid', 65);

  // Category.
  dpm($row['category'], 'category');
  if (isset($row['category'])) {
    // Make it plural
    $row['category'] .= 's';

    if ($category = ev_import_get_term($row['category'], 'hr_event_category')) {
      $event->field_event_category['und'][0]['target_id'] = $category->tid;
    }
  }

  if (isset($row['location']) && $location = ev_import_get_term($row['location'], 'hr_location')) {
    $event->field_location['und'][0]['target_id'] = $location->tid;
  }

  if (isset($row['location_details']) && isset($row['location_details'])) {
    $event->field_address['und'][0]['locality'] = $row['location_details'];
  }

$event = node_submit($event);
node_save($event);
dpm($event);
return;




  if (isset($row['themes']) && is_array($row['themes'])) {
    $current_original_theme = isset($event->field_event_original_theme['en'][0]['value']) ? $event->field_event_original_theme['en'][0]['value'] : '';

    $event->field_event_theme['en'] = array();
    $event->field_event_original_theme['en'][0]['value'] = '';
    foreach ($row['themes'] as $name) {
      if ($theme = ev_import_get_term($name, 'ev_theme')) {
        $event->field_event_theme['en'][]['tid'] = $theme->tid;
      }
      else {
        if (!isset($event->field_event_original_theme['en'][0]['value'])) {
          $event->field_event_original_theme['en'][0]['value'] = $name;
        }
        else {
          $event->field_event_original_theme['en'][0]['value'] .= ', ' . $name;
        }
      }
    }

    // Limit to 250 characters.
    if (isset($event->field_event_original_theme['en'][0]['value'])) {
      $event->field_event_original_theme['en'][0]['value'] = substr($event->field_event_original_theme['en'][0]['value'], 0, 250);
    }
  }

  if (isset($row['organizations']) && is_array($row['organizations'])) {
    $current_organization = isset($event->field_event_organization['en']) ? $event->field_event_organization['en'] : array();
    $event->field_event_organization['en'] = array();
    foreach ($row['organizations'] as $name) {
      if ($organization = ev_import_get_term($name, 'ev_organization')) {
        $event->field_event_organization['en'][]['tid'] = $organization->tid;
      }
    }
  }

  if (isset($row['disasters']) && is_array($row['disasters'])) {
    $current_disaster = isset($event->field_event_disasters['en']) ? $event->field_event_disasters['en'] : array();
    $event->field_event_disasters['en'] = array();
    foreach ($row['disasters'] as $name) {
      if ($disaster = ev_import_get_term($name, 'ev_disaster')) {
        $event->field_event_disasters['en'][]['tid'] = $disaster->tid;
      }
    }
  }

  $cluster_tids = array();
  if (isset($row['sectors']) && is_array($row['sectors'])) {
    foreach ($row['sectors'] as $name) {
      if ($sector = ev_import_get_term($name, 'ev_list')) {
        $cluster_tids[] = $sector->tid;
      }
      elseif (isset($row['location']) && $sector = ev_import_get_term($row['location'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $sector->tid;
      }
      elseif (isset($row['country']) && $sector = ev_import_get_term($row['country'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $sector->tid;
      }
    }
  }

  if (isset($row['bundles']) && is_array($row['bundles'])) {
    foreach ($row['bundles'] as $name) {
      if ($bundle = ev_import_get_term($name, 'ev_list')) {
        $cluster_tids[] = $bundle->tid;
      }
      elseif (isset($row['location']) && $bundle = ev_import_get_term($row['location'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $bundle->tid;
      }
      elseif (isset($row['country']) && $bundle = ev_import_get_term($row['country'] . ': ' . $name, 'ev_list')) {
        $cluster_tids[] = $bundle->tid;
      }
    }
  }

  if (!empty($cluster_tids)) {
    $current_cluster_tids = isset($event->field_event_cluster['en']) ? $event->field_event_cluster['en'] : array();
    $event->field_event_cluster['en'] = array();
    // Remove duplicates.
    $cluster_tids = array_unique($cluster_tids);
    foreach ($cluster_tids as $cluster_tid) {
      $event->field_event_cluster['en'][]['tid'] = $cluster_tid;
    }
  }

  if (isset($row['coordination_hubs']) && is_array($row['coordination_hubs'])) {
    $current_coordination_hub = isset($event->field_event_coordination_hub['en']) ? $event->field_event_coordination_hub['en'] : array();
    $event->field_event_coordination_hub['en'] = array();
    foreach ($row['coordination_hubs'] as $name) {
      if ($coordination_hub = ev_import_get_term($name, 'ev_coordination_hub')) {
        $event->field_event_coordination_hub['en'][]['tid'] = $coordination_hub->tid;
      }
    }
  }

  $current_documents = isset($event->field_event_documents['en']) ? $event->field_event_documents['en'] : array();
  if (isset($row['event_meeting_minutes']) && is_array($row['event_meeting_minutes'])) {
    $meeting_minute_term_info = events_config_get_term('Meeting Minutes', 'ev_document_type');
    $meeting_minute_tid = $meeting_minute_term_info['term']->tid;
    foreach ($row['event_meeting_minutes'] as $event_meeting_minute) {
      $fid = ev_import_fetch_and_save_file($event_meeting_minute['name'], $event_meeting_minute['url'], $event->created);
      if ($fid) {
        $event->field_event_documents['en'][0]['field_document_type']['en'][0]['tid'] = $meeting_minute_tid;
        $event->field_event_documents['en'][0]['field_document_file']['en'][0] = array(
          'fid' => $fid,
          'display' => 1,
          'description' => $event_meeting_minute['name'],
        );
      }
    }
  }

  if (isset($row['event_agenda']) && is_array($row['event_agenda'])) {
    $meeting_minute_term_info = events_config_get_term('Agenda', 'ev_document_type');
    $meeting_minute_tid = $meeting_minute_term_info['term']->tid;
    foreach ($row['event_agenda'] as $event_meeting_minute) {
      $fid = ev_import_fetch_and_save_file($event_meeting_minute['name'], $event_meeting_minute['url'], $event->created);
      if ($fid) {
        $event->field_event_documents['en'][0]['field_document_type']['en'][0]['tid'] = $meeting_minute_tid;
        $event->field_event_documents['en'][0]['field_document_file']['en'][0] = array(
          'fid' => $fid,
          'display' => 1,
          'description' => $event_meeting_minute['name'],
        );
      }
    }
  }

  $event = node_submit($event);
  node_save($event);

  ev_import_log('Events saved with id ' . $event->nid);
}

/**
 * Implements hook_node_presave().
 */
function ev_import_node_presave($node) {
  if (isset($node->ev_import_changed)) {
    $node->changed = $node->ev_import_changed;
    $node->timestamp = $node->ev_import_changed;
  }
  if (isset($node->ev_import_created)) {
    $node->created = $node->ev_import_created;
  }
}

/**
 * Load a term.
 */
function ev_import_get_term($name, $vocabulary) {
  // Query by name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->entityCondition('bundle', $vocabulary, '=');
  $query->propertyCondition('name', $name, '=');
  $result = $query->execute();
dpm($result['taxonomy_term'], $name);
  // Make sure term exists.
  if (!isset($result['taxonomy_term'])) {
    return FALSE;
  }

  $term_tid = reset($result['taxonomy_term']);
  $term = taxonomy_term_load($term_tid->tid);
  return $term;
}

/**
 * Fetch and save a remote file.
 */
function ev_import_fetch_and_save_file($filename, $url, $timestamp) {
  $fid = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('filename', $filename)
    ->range(0, 1)
    ->execute()->fetchField();

  if (variable_get('ev_import_file_authentication_hrinfo', '')) {
    $url = str_replace('https://', 'https://' . variable_get('ev_import_file_authentication_hrinfo', '') . '@', $url);
  }

  if (!$fid) {
    $field_info = field_info_field('field_document_file');
    $instance = field_info_instance('multifield', 'field_document_file', 'field_event_documents');

    $destination = file_stream_wrapper_uri_normalize($field_info['settings']['uri_scheme'] . '://' . $instance['settings']['file_directory'] . '/' . format_date($timestamp, 'custom', 'Y-m-d') . '/');
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $file = _ev_import_system_retrieve_file($url, $destination, TRUE, FILE_EXISTS_RENAME);
    if ($file) {
      return $file->fid;
    }
    else {
      ev_import_log('Unable to fetch ' . $url);
    }
  }
  else {
    return $fid;
  }

  return FALSE;
}

/**
 * Attempts to get a file using drupal_http_request and to store it locally.
 *
 * @see system_retrieve_file()
 */
function _ev_import_system_retrieve_file($url, $destination = NULL, $managed = FALSE, $replace = FILE_EXISTS_RENAME) {
  $parsed_url = parse_url($url);
  if (!isset($destination)) {
    $path = file_build_uri(drupal_basename($parsed_url['path']));
  }
  else {
    if (is_dir(drupal_realpath($destination))) {
      // Prevent URIs with triple slashes when glueing parts together.
      $path = str_replace('///', '//', "$destination/") . drupal_basename($parsed_url['path']);
    }
    else {
      $path = $destination;
    }
  }
  $result = drupal_http_request($url);
  if ($result->code != 200) {
    return FALSE;
  }
  $local = $managed ? file_save_data($result->data, $path, $replace) : file_unmanaged_save_data($result->data, $path, $replace);
  if (!$local) {
    drupal_set_message(t('@remote could not be saved to @path.', array('@remote' => $url, '@path' => $path)), 'error');
  }

  return $local;
}
