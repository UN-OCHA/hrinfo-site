<?php
/**
 * @file
 * Code for the Contacts feature.
 */

include_once 'hr_contacts.features.inc';

/**
 * Implements hook_menu_alter()
 */
function hr_contacts_menu_alter(&$items) {
  $items['node/add/hr-contact']['page callback'] = 'hr_contacts_disabled_page_callback';
  $items['node/add/hr-contact']['title'] = t('Create Contact');
}

/**
 * Callback for displaying the disabled add contact page.
 */
function hr_contacts_disabled_page_callback() {
  $header = t('Contacts in <strong>HumanitarianResponse.info</strong> are now powered by <strong>Humanitarian ID (HID)</strong>');
  $message = t('In order to add a new contact, you will need to go to <a href="@hid">HID</a> and either Check-in the responder or use the "Create A Responder" function', array('@hid' => 'http://humanitarian.id'));
  return array(
    '#theme' => 'hr_contacts_disabled_contacts',
    '#header' => $header,
    '#message' => $message,
  );
}

/**
 * Implements hook_theme().
 */
function hr_contacts_theme() {
  return array(
    'hr_contacts_disabled_contacts' => array(
      'variables' => array(
        'header' => NULL,
        'message' => NULL,
      ),
      'template' => 'templates/hr-contacts-disabled-contacts',
    ),
  );
}

function _hr_contacts_copy_field(&$node_form, $profile, $field_name, $type) {
  if (isset($profile->{$field_name}[LANGUAGE_NONE])) {
    switch ($type) {
      case 'textfield':
        $node_form[$field_name][LANGUAGE_NONE][0]['value']['#default_value'] = $profile->{$field_name}[LANGUAGE_NONE][0]['value'];
        break;
      case 'entityreference':
        $values = array();
        foreach ($profile->{$field_name}[LANGUAGE_NONE] as $val) {
          $values[] = $val['target_id'];
        }
        $node_form[$field_name][LANGUAGE_NONE]['#default_value'] = $values;
        break;
      case 'phone':
        foreach ($profile->{$field_name}[LANGUAGE_NONE] as $i => $val) {
          if ($i > 0) {
            $node_form[$field_name][LANGUAGE_NONE][$i] = $node_form[$field_name][LANGUAGE_NONE][0];
          }
          $node_form[$field_name][LANGUAGE_NONE][$i]['#default_value'] = $val;
        }
        break;
      case 'email':
        foreach ($profile->{$field_name}[LANGUAGE_NONE] as $i => $val) {
          if ($i > 0) {
            $node_form[$field_name][LANGUAGE_NONE][$i] = $node_form[$field_name][LANGUAGE_NONE][0];
          }
          $node_form[$field_name][LANGUAGE_NONE][$i]['email']['#default_value'] = $val['email'];
        }
        break;
      case 'link':
        foreach ($profile->{$field_name}[LANGUAGE_NONE] as $i => $val) {
          if ($i > 0) {
            $node_form[$field_name][LANGUAGE_NONE][$i] = $node_form[$field_name][LANGUAGE_NONE][0];
          }
          $node_form[$field_name][LANGUAGE_NONE][$i]['#default_value'] = $val;
        }
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function hr_contacts_form_og_ui_confirm_subscribe_alter(&$form, &$form_state) {
  global $user;
  if (isset($form['field_contact_information'])) {
    $profile = profile2_load_by_user($user, 'main');
    $node_form = &$form['field_contact_information'][LANGUAGE_NONE]['form'];
    $fields = array(
      'field_first_name' => 'textfield',
      'field_last_name' => 'textfield',
      'field_organizations' => 'entityreference',
      'field_organizations_other' => 'textfield',
      'field_job_title' => 'entityreference',
      'field_job_title_other' => 'textfield',
      'field_phones' => 'phone',
      'field_location' => 'entityreference',
      'field_emails' => 'email',
      'field_social_media' => 'link',
      'field_skype_id' => 'textfield',
    );

    foreach ($fields as $field_name => $type) {
      _hr_contacts_copy_field($node_form, $profile, $field_name, $type);
    }

    // Fill in and hide field_first_name
    $node_form['field_first_name'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';

    // Fill in and hide field_last_name
    $node_form['field_last_name'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';

    // Fill in main email
    $node_form['field_email'][LANGUAGE_NONE][0]['email']['#default_value'] = $user->mail;

    // Hide og_group_ref
    $node_form['og_group_ref'][LANGUAGE_NONE][0]['default']['#type'] = 'hidden';

  }

  if (module_exists('hs_taxonomy')) {
    if (isset($form['field_locations']['und']['#config'])) {
      $form['field_locations']['und']['#config']['dropbox']['title'] = t('Current selections');
      $form['field_locations']['und']['#config']['animation_delay'] = 0;
      $form['field_locations']['und']['#config']['level_labels'] = array(
        'status' => 1,
        'labels' => array(
          0 => t('Country'),
          1 => t('Admin 1'),
          2 => t('Admin 2'),
          3 => t('Admin 3'),
        ),
      );
    }
  }

  // Show multiple empty ones for locations.
  if (!isset($form['#node']->nid)) {
    $items_count = 4;
    $field_name = 'field_locations';
    _hr_document_render_multiple_input_lines($field_name, $items_count, $form, $form_state);
  }
}

/**
 * Implements hook_og_features_registry()
 */
function hr_contacts_og_features_registry() {
  $registry = array();
  $feature = new stdClass();
  $feature->id = 'hr_contacts';
  $feature->name = t('Contacts');
  $feature->description = t('Provide contacts to your space.');
  $feature->components = array(
    'node' => array(
      'hr_contact',
    ),
    'views' => array(
      'hr_contacts_panes',
    ),
    'pane' => array(
      'hr_contacts_panes-list',
      'hr_contacts',
    ),
  );
  $registry[$feature->id] = $feature;
  return $registry;
}

/**
 * Implementation of hook_entity_info_alter()
 */
function hr_contacts_entity_info_alter(&$entity_info) {

  // Quick links
  $entity_info['fieldable_panels_pane']['bundles']['hr_contacts'] = array(
    'label' => t('Contacts'),
    'pane category' => t('Contacts'),
    'pane top level' => TRUE,
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/hr-contacts',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_search_api_views_query_alter()
 *
 * Makes the contacts view available for disasters
 */
function hr_contacts_search_api_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_contacts') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (reset($condition) == 'og_group_ref') {
          $nid = $condition[1];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $condition = array('field_disasters', $nid, '=');
          }
          // Clusters as spaces
          // See http://atrium.humanitarianresponse.info/humanitarian_response/node/4363
          elseif ($node->type == 'hr_bundle') {
            $condition = array('field_bundles', $nid, '=');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render()
 * Adds PDF button to export events as PDF
 * See http://atrium.humanitarianresponse.info/humanitarian_response/node/4466
 */
function hr_contacts_views_pre_render(&$view) {
  if ($view->name == 'hr_contacts') {
    if ($view->current_display == 'master' || $view->current_display == 'table' || $view->current_display == 'list') {
      $view->feed_icon .= '<li>'.l('PDF', str_replace('/contacts', '/contacts/pdf', current_path()), array('attributes' => array('target' => 'about:blank'))).'</li>';
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function hr_contacts_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu()
 */
function hr_contacts_menu() {
  $items['node/%node/contacts/pdf'] = array(
    'page callback' => 'hr_contacts_pdf_output',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Generate contacts in a pdf file.
 */
function hr_contacts_pdf_output($node) {
  $path = current_path();
  $label = entity_label('node', $node);
  $label = transliteration_clean_filename($label);
  $html_path = str_replace('/pdf', '/print', $path);

  // Print PDF using wkhtmltopdf service.
  $html_url = url($html_path, array('absolute' => TRUE));
  $params = array(
    'url' => $html_url,
    'params' => array(
      'print-media-type' => 'true',
      'footer-left' => t('Page [page] of [topage]'),
      'footer-right' => t('Powered by HUMANITARIAN RESPONSE. Date of creation: [date]')."\nhttp://www.humanitarianresponse.info",
      'footer-font-name' => 'Exo 2',
      'footer-font-size' => '8',
      'footer-spacing' => '2',
    ),
  );

  $url = hr_events_wkhtmltopdf_url();
  $url .= '?' . http_build_query($params, NULL, '&');
  $req_params = array(
    'method' => 'POST',
  );
  drupal_add_http_header('Content-Type', 'application/pdf; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename="'. $label .'.pdf"');
  $output = chr_curl_http_request($url, $req_params);
  echo $output->data;
  exit;
}
