<?php
/**
 * @file
 * Code for the Layout feature.
 */

include_once 'hr_layout.features.inc';

/**
 * Implements hook_ctools_plugin_directory()
 */
function hr_layout_ctools_plugin_directory($module, $plugin) {
  if ($module == "panels" && in_array($plugin, array('styles'))) {
    return "plugins/$plugin";
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu()
 */
function hr_layout_menu() {
  $items = array();

  $items['node/%node/add-content'] = array(
    'title' => 'Add content',
    'page callback' => 'hr_layout_add_content',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['node/%node/clone_new'] = array(
    'access callback' => 'clone_access_cloning',
    'access arguments' => array(1),
    'page callback' => 'hr_layout_clone_new',
    'page arguments' => array(1),
    'title' => 'Clone content (new form)',
    'weight' => 7,
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

function hr_layout_clone_new($node) {
  $type = str_replace('-', '_', $node->bundle);
  $types = array(
    'hr_document' => 'document',
    'hr_infographic' => 'infographic',
    'hr_event' => 'event',
    'hr_assessment' => 'assessment',
    'hr_office' => 'office'
  );
  drupal_goto('https://app.humanitarianresponse.info/' . $types[$type] . 's/' . $node->nid . '/clone');
}

/**
 * Callback that renders the document list.
 */
function hr_layout_add_content($node) {
  $content = array();

  $title = '<h1>' . t('Share your info') . '</h1>';
  $intro = '<p>' . t('Humanitarian Response relies on information contributed by numerous organizations. We welcome content from a variety of sources, including NGOs, UN agencies and governments. By sharing information on Humanitarian Response, your organization helps to support efficient, effective, and coordinated humanitarian response through the sharing of operational information.') . '</p>';

  $content[] = t('<strong>Have a report, press release or map/infographic to share?</strong> <a href="@url">Send it to submit@reliefweb.int.</a>', array(
    '@url' => 'mailto:submit@reliefweb.int',
  ));
  $content[] = t('<strong>Have an event and related documents to share?</strong> <a href="https://events.rwlabs.org">Add them to Humanitarian Events.</a>');

  $content[] = t('<strong>Have a dataset to share?</strong> <a href="https://data.humdata.org/contribute">Send to HDX.</a>');

  $content[] = t('<strong>Have an assessment to share?</strong> <a href="@url">Submit it via this form.</a>', array(
    '@url' => url('node/add/hr-assessment', array(
      'query' => array(
        'og_group_ref' => $node->nid,
      ),
    )),
  ));
  $content[] = '<br>' . t('<strong>Have questions or comments?</strong> <a href="@url">Send an email to info@humanitarianresponse.info.</a>', array(
    '@url' => url('mailto:info@humanitarianresponse.info'),
  ));

  return $title . $intro . '<p>' . implode('</p><p>', $content) . '</p>';
}

/**
 * Implements hook_block_info().
 */
function hr_layout_block_info() {
  return array(
    'hr_layout_login' => array(
      'info' => t('HR Login block'),
    ),
    'hr_layout_create_links' => array(
      'info' => t('OG Create links'),
    ),
    'hr_layout_share_links' => array(
      'info' => t('Share links'),
    ),
    'hr_layout_key_documents' => array(
      'info' => t('Key documents'),
    ),
    'hr_layout_hum_system' => array(
      'info' => t('Humanitarian System'),
    ),
    'hr_layout_search_rss' => array(
      'info' => t('Search rss'),
    ),
    // See https://github.com/humanitarianresponse/site/issues/372
    'hr_layout_horz_menu' => array(
      'info' => t('Horizontal menu'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function hr_layout_block_view($delta = '') {
  global $user, $base_url;
  $block = array();

  switch ($delta) {
    case 'hr_layout_create_links':
      $block['content'] = hr_layout_create_links();
      break;
    case 'hr_layout_login':
      $block['content'] = '';
      if (!user_is_logged_in()) {
        $block['content'] = l(t('Log in'), $base_url.'/login', array('attributes' => array('class' => array('btn', 'btn-default'))));
      }
      break;
    case 'hr_layout_share_links':
      $block['content'] = '';
      $context = og_context();
      if (!empty($context) && $context['group_type'] == 'node') {
        $gid = $context['gid'];
        $node = node_load($gid);
        node_build_content($node);
        $view = $node->content;
        $current_title = drupal_get_title();
        // If the current node ID & context ID are different, then we know we
        // are in a cluster page.
        if(arg(1) != $context['gid']) {
          $block['content'] .= '<div class="cluster"><div class="image"></div>' . $current_title . ' Cluster</div>';
          $block['content'] .= '<hr/>';
        }

        // Add the RSS link.
        $block['content'] .= _hr_layout_rss_icon('node', $gid);

        if (!empty($node->field_social_media)) {
          $link_social_options = array(
            'html' => TRUE,
            'absolute' => TRUE,
            'attributes' => array(
              'class' => array(
                'btn',
                'btn-primary',
              ),
              'target' => '_blank'
            ),
          );
          foreach($node->field_social_media[LANGUAGE_NONE] as $social_media) {
            $format = hr_layout_social_media_link($social_media['url']);
            $link_social_options['attributes']['title'] = $format['text'];
            // Render Social Media link.
            $block['content'] .= '<div class="space-social-media">';
            $block['content'] .= l($format['text'] . '<i class="fa ' . $format['icon'] . '"></i>', $social_media['url'], $link_social_options);
            $block['content'] .= '</div>';
          }
        }


        $block['content'] .= '<hr/>';

        if (isset($view['field_organizations'])) {
          $block['content'] .= '<div class="manager">'.t('Managed by').': <br />';
          foreach ($view['field_organizations']['#items'] as $org) {
            $block['content'] .= '<i>'.entity_label('taxonomy_term', $org['entity']).'</i><br />';
          }
          $block['content'] .= '</div>';
        }

        if (isset($view['field_users'])) {
          $block['content'] .= '<div class="manager">'.t('Focal points').': <br />';
          foreach ($view['field_users']['#items'] as $field_user) {
            $block['content'] .= '<i>'.l(entity_label('user', $field_user['entity']), 'user/'.$field_user['target_id']).'</i><br />';
          }
          $block['content'] .= '</div>';
        }


        if (isset($view['field_email'])) {
          // Render Email link.
          $link_email_options = array(
            'html' => TRUE,
            'absolute' => TRUE,
            'attributes' => array(
              'title' => t('Contact'),
              'class' => array(
                'btn',
                'btn-primary',
              ),
            ),
          );
          $block['content'] .= '<div class="space-email">';
          $block['content'] .= l(t('Contact') . '<i class="fa fa-at"></i>', 'mailto:'.$view['field_email']['#items'][0]['email'], $link_email_options);
          $block['content'] .= '</div>';
        }

      }
      break;
    case 'hr_layout_search_rss':
      $gid = NULL;
      $context = og_context();
      if (!empty($context) && $context['group_type'] == 'node') {
        $gid = $context['gid'];
      }
      $block['content'] = _hr_layout_rss_icon('search', $gid);
      break;
    case 'hr_layout_key_documents':
      drupal_add_library('chosen', 'drupal.chosen');
      $block['subject'] = t('Assessments, Documents, & Maps');
      $block['content'] = '<ul>';
      $block['content'] .= '<li>'.l(t('3W / 4W'), 'infographics/infographic-type/3w').'</li>';
      $block['content'] .= '<li>'.l(t('Appeals'), 'documents/document-type/appeal').'</li>';
      $block['content'] .= '<li>'.l(t('Assessments'), 'assessments').'</li>';
      $block['content'] .= '<li>'.l(t('Humanitarian Bulletin'), 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/humanitarian-bulletin').'</li>';
      $block['content'] .= '<li>'.l(t('Humanitarian Needs Overview - HNO'), 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/humanitarian-needs-overview').'</li>';
      $block['content'] .= '<li>'.l(t('Humanitarian Response Plan - HRP'), 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/strategic-response-plan').'</li>';
      $block['content'] .= '<li>'.l(t('Maps/Infographics'), 'infographics').'</li>';
      $block['content'] .= '<li>'.l(t('Situation Reports'), 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/situation-report').'</li>';
      $block['content'] .= '</ul>';
      $block['content'] .= '<div class=view-all-hr-layout-key-documents><p class="text-center">'.l(t('View All Documents'), 'documents').'</p></div>';
      break;
    case 'hr_layout_hum_system':
      $block['subject'] = t('Humanitarian System');
      $block['content'] = '<ul>';
      $block['content'] .= '<li>'.l(t('Cluster Approach'), 'coordination/clusters').'</li>';
      $block['content'] .= '<li>'.l(t('Humanitarian Programme Cycle'), 'programme-cycle/space').'</li>';
      $block['content'] .= '<li>'.l(t('Humanitarian Leadership'), 'coordination/humanitarian-leadership').'</li>';
      $block['content'] .= '<li>'.l(t('Indicator Registry'), 'applications/ir').'</li>';
      $block['content'] .= '<li>'.l(t('NGOs'), 'coordination/ngos').'</li>';
      $block['content'] .= '<li>'.l(t('Policy and Guidance'), 'documents/document-type/policy-and-guidance').'</li>';
      $block['content'] .= '<li>'.l(t('Training and resource materials'), 'documents/document-type/training-and-resource-materials').'</li>';
      $block['content'] .= '<li>'.l(t('Transformative Agenda'), 'topics/transformative-agenda').'</li>';
      $block['content'] .= '</ul>';
      // Add select option for global clusters available here:
      // http://www.humanitarianresponse.info/en/coordination/clusters/global
      $block['content'] .= '<p class="text-center"><select id="clusters-dropdown" data-placeholder="Clusters/Themes" class="hr-goto-dropdown"><option value="_none"></option>';
      $options = '
        <option value="coordination/clusters/camp-coordination-management">Camp Coordination / Management</option>
        <option value="coordination/clusters/child-protection">Child Protection</option>
        <option value="coordination/clusters/early-recovery">Early Recovery</option>
        <option value="coordination/clusters/education">Education</option>
        <option value="coordination/clusters/emergency-shelter-and-nfi">Emergency Shelter and NFI</option>
        <option value="coordination/clusters/emergency-telecommunications">Emergency Telecommunications</option>
        <option value="/topics/environment">Environment</option>
        <option value="coordination/clusters/food-security">Food Security</option>
        <option value="/topics/gender">Gender</option>
        <option value="coordination/clusters/gender-based-violence">Gender Based Violence</option>
        <option value="coordination/clusters/health">Health</option>
        <option value="coordination/clusters/housing-land-and-property">Housing, Land and Property</option>
        <option value="coordination/clusters/logistics">Logistics</option>
        <option value="coordination/clusters/mine-action">Mine Action</option>
        <option value="coordination/clusters/nutrition">Nutrition</option>
        <option value="coordination/clusters/protection">Protection</option>
        <option value="coordination/clusters/water-sanitation-hygiene">Water Sanitation Hygiene</option>
      ';
      $block['content'] .= $options;
      $block['content'] .= '</select></p>';
      break;
    case 'hr_layout_horz_menu':
      $block['content'] = '';
      $gid = og_context_determine_context('node');
      $current_path = current_path();
      // Handling special case for Colombia
      if ($current_path == 'j2h/contactos') {
        $gid = 77;
      }
      if (!empty($gid)) {
        $order = array(
          'hid_contacts',
          'hr_events',
          'ev_events',
          'hr_reliefweb_meeting_documents',
          'hr_documents',
          'hr_infographics',
          'hr_reliefweb_documents',
          'hdx_datasets',
          'hr_offices',
          'hr_assessments',
          'hr_news',
          'acc_applications',
          'acc_incidents',
          'ar_assessments'
        );
        $og_group = entity_load('node', array($gid));
        $og_group = $og_group[$gid];
        $items = array();
        $items[] = array(
          'name' => $og_group->title,
          'path' => 'node/'.$gid
        );
        $paths = array();
        // Fetch the og features registry
        $registry = og_features_get_registry();
        // Iterate all the available features to provide a toggle switch
        foreach ($registry as $key => $feature) {
          // Make sure this feature can be toggled by this group
          if (!og_features_feature_can_toggle('node', $og_group->bundle_name, $key) || $key == 'hr_pages' || $key == 'hr_webforms') {
            continue;
          }
          // Check if feature is disabled
          if (!og_features_feature_is_disabled($key, $og_group)) {
            $path = str_replace('hr_', '', $key);
            switch($key) {
              case 'hid_contacts':
                if ($gid != 77) { // Special case: Colombia, which is not using Humanitarian ID
                  $path = 'hid_contacts';
                }
                else {
                  $path = 'j2h/contactos';
                }
                break;
              case 'ev_events':
                $path = 'humanitarian-events';
                break;
              case 'hr_reliefweb_documents':
                $path = 'reliefweb';
                break;
              case 'hr_reliefweb_meeting_documents':
                $path = 'meeting-documents';
                break;
              case 'ar_assessments':
                $path = 'ar_assessments';
                break;
              case 'hdx_datasets':
                $path = 'hdx-datasets';
                break;
              case 'hr_news':
                $path = 'blog';
                break;
              case 'acc_applications':
                $path = 'access/applications';
                break;
              case 'acc_incidents':
                $path = 'access/incidents';
                break;

              case 'hr_events':
                // Hide menu item when hr_reliefweb_meeting_documents is active.
                if (array_key_exists('ev_events', $registry) && !og_features_feature_is_disabled('ev_events', $og_group)) {
                  continue 2;
                }
                break;

              case 'hr_documents':
              case 'hr_infographics':
                // Hide menu item when hr_reliefweb_documents is active.
                if (array_key_exists('hr_reliefweb_documents', $registry) && !og_features_feature_is_disabled('hr_reliefweb_documents', $og_group)) {
                  continue 2;
                }
                break;
            }
            // If not disabled add to menu items
            $paths[$key] = array(
              'name' => $feature->name,
              'path' => 'node/'.$gid.'/'.$path
            );

            if ($path == 'j2h/contactos') {
              $paths[$key]['path'] = $path;
            }
          }
        }

        // Indicators registry
        if ($gid == 24) {
          $items[] = array(
            'name' => 'Indicators',
            'path' => 'node/'.$gid.'/indicators'
          );
        }

        $block['content'] = '<ul class="menu nav nav-pills">';
        foreach ($order as $feature) {
          if (isset($paths[$feature])) {
            $items[] = $paths[$feature];
          }
        }

        foreach ($items as $item) {
          $block['content'] .= '<li>'.l(t($item['name']), $item['path']).'</li>';
        }
        $block['content'] .= '</ul>';
      }
      break;
  }
  return $block;
}

/**
 * Provides an RSS icon.
 *
 * @param $mode
 *
 * @return string
 */
function _hr_layout_rss_icon($mode = 'node', $gid = NULL) {
  $link_rss_options = array(
    'html' => TRUE,
    'attributes' => array(
      'title' => t('RSS Feed'),
      'class' => array(
        'btn',
        'btn-primary',
      ),
    ),
  );
  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('space-rss'),
    ),
  );

  if ($mode == 'node') {
    // For nodes we need to include the group id and rely on the feed view.
    $url = 'node/'. $gid .'/feed';
  }
  elseif ($mode == 'search') {
    // For search mode or operations search features, we inject the feed view
    // in the current search terms.
    $arguments = arg();
    if (!empty($gid)) {
      array_splice($arguments, 3, 0, 'feed');
    }
    else {
      array_splice($arguments, 1, 0, 'feed');
    }

    foreach ($arguments as $delta => $argument) {
      // Also strip out the table and list url arguments to not affect the Feed
      // search results.
      if ($argument == 'table' || $argument == 'list') {
        unset($arguments[$delta]);
      }
    }

    // Generate the search query url. This url needs to be absolute to avoid url
    // encoding.
    $params = array('absolute' => TRUE);
    $search_query = isset($_GET['search']) && is_string($_GET['search']) ? trim($_GET['search']) : '';
    if (!empty($search_query)) {
      $params['query'] = array('search' => $search_query);
    }
    $url = url(implode('/', $arguments), $params);
  }

  if (!empty($url)) {
    $output['rss'] = array(
      '#markup' => l(t('Newsfeed') . '<i class="fa fa-rss"></i>', $url, $link_rss_options),
    );
  }

  return drupal_render($output);
}

/**
 * Return icon name & link title for given URL.
 */
function hr_layout_social_media_link($url) {
  $services = array(
    'facebook.com' => array('icon' => 'fa-facebook', 'text' => 'Facebook'),
    'twitter.com' => array('icon' => 'fa-twitter', 'text' => 'Twitter'),
    'linkedin.com' => array('icon' => 'fa-linkedin', 'text' => 'LinkedIn'),
    'github.com' => array('icon' => 'fa-github', 'text' => 'Github'),
    'pinterest.com' => array('icon' => 'fa-pinterest', 'text' => 'Pinterest'),
    'google.com' => array('icon' => 'fa-google-plus', 'text' => 'Google'),
  );

  $parsed = parse_url($url);
  $chunks = explode('.', $parsed['host']);
  if (count($chunks) == 1)
    $host = $chunks[0];
  else
    $host = $chunks[count($chunks)-2] . '.' . $chunks[count($chunks)-1];

  if (isset($services[$host]))
    return $services[$host];
  else
    return array('icon' => 'fa-globe', 'text' => t('Social Media'));
}

function hr_layout_create_links() {
  global $user;
  $button = '';
  if (!user_is_logged_in()) {
    return $button;
  }

  $gid = NULL;
  $context = og_context();
  if ($context['gid']) {
    $gid = $context['gid'];
  }

  if (!empty($gid)) {
    $bundle_id = 0;
    $groups = entity_load('node', array($gid));
    $group = $groups[$gid];
    if ($group->type == 'hr_bundle') {
      $bundle_id = $group->nid;
      $op_gid = _hr_bundles_get_operation($group->nid);
      $groups = entity_load('node', array($op_gid));
      $group = $groups[$op_gid];
    }
    $types = array();
    foreach (node_type_get_types() as $type) {
      if (og_is_group_content_type('node', $type->type)) {
        $types[$type->type] = $type->type;
      }
    }

    if (in_array($gid, variable_get('hr_layout_show_new_button', array('65')))) {
      $link = url('node/' . $gid . '/add-content');
      $button = '<div class="btn-group"><a style="color: #fff;" class="btn btn-default dropdown-toggle" href="' . $link . '"><i class="fa fa-plus-square"></i></a></div>';
    }
    else {
      $extra_fields = array();
      if (!empty($bundle_id)) {
        $extra_fields = array('field_bundles' => $bundle_id);
      }
      $content = og_node_create_links('node', $group->nid, OG_AUDIENCE_FIELD, FALSE, $types, $extra_fields);
      if (!empty($content['og_node_create_links']['#items'])) {
        foreach ($content['og_node_create_links']['#items'] as $key => $item) {
          // Unfortunately we have to parse the link path to determine
          // which node type this is for
          $matches = array();
          if (preg_match("/(?<=(node\/add\/)).*(?=\?)/", $item['data'], $matches)) {
            if (isset($matches[0])) {
              // Reformat the node type
              $type = str_replace('-', '_', $matches[0]);
              // See if this node type is disabled for this group
              if (!og_features_component_is_disabled('node', $type, $group)) {
                if ($type != 'hr_contact' || ($type == 'hr_contact' && (og_is_member('node', $group->nid) || in_array('editor', $user->roles)))) {
                  $button .= '<li>'.$item['data'].'</li>';
                  if (in_array($type, array('hr_document', 'hr_infographic', 'hr_event', 'hr_assessment', 'hr_office'))) {
                    $types = array(
                      'hr_document' => 'document',
                      'hr_infographic' => 'infographic',
                      'hr_event' => 'event',
                      'hr_assessment' => 'assessment',
                      'hr_office' => 'office'
                    );
                    $typeName = ucfirst(t($types[$type]));
                    if ($type == 'hr_infographic') {
                      $typeName = t('Map/Infographic');
                    }
                    $button .= '<li class="create-link-new"><a href="https://app.humanitarianresponse.info/' . $types[$type] . 's/new" target="_blank">' . $typeName .' (Try the new forms)</a></li>';
                  }
                }
              }
            }
          }
        }
        if (!empty($button)) {
          $button = '<div class="btn-group">
          <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
            <i class="fa fa-plus-square"></i>
          </button>
          <ul class="dropdown-menu" role="menu">'.$button.'</ul></div>';
        }
      }
    }
  }

  return $button;
}

/**
 * Implements hook_menu_alter()
 * HACK: fixes a bug that makes ajax calls stop working when adding an FTS
 * Visualization through "Bean Panes" (Panels)
 */
function hr_layout_menu_alter(&$items) {
  $items['system/ajax']['page callback'] = 'hr_layout_ajax_form_callback';
}

function hr_layout_ajax_form_callback() {
  module_load_include('inc', 'bean_pane', 'plugins/content_types/bean_pane');
  return ajax_form_callback();
}

/**
 * Implements hook_form_alter().
 *
 * Change default cache for new Panels panes.
 * Sets content cache for views panes and simple cache for custom content and fieldable panels panes
 */
function hr_layout_form_alter(&$form, &$form_state, $form_id) {
  $panels_add_content_forms = array('ctools_block_content_type_edit_form',
    'ctools_custom_content_type_edit_form',
    'ctools_node_content_type_edit_form',
    'views_content_views_panes_content_type_edit_form',
    'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form',
    'ctools_bean_pane_content_type_form',
  );

  if (in_array($form_id, $panels_add_content_forms)) {
    if ($form_id == 'views_content_views_panes_content_type_edit_form') {
      $cache = array(
        'method' => 'content',
        'settings' => array('lifetime' => 'none'),
      );
      switch($form_state['pane']->subtype) {
        case 'hr_documents_panes-list':
          $form_state['pane']->cache = $cache;
          $form_state['pane']->cache['settings']['content_types'] = array('hr_document' => 'hr_document');
          break;
        case 'hr_contacts_panes-list':
          $form_state['pane']->cache = $cache;
          $form_state['pane']->cache['settings']['content_types'] = array('hr_contact' => 'hr_contact');
          break;
        case 'hr_events_panes-upcoming':
          $form_state['pane']->cache = $cache;
          $form_state['pane']->cache['settings']['content_types'] = array('hr_event' => 'hr_event');
          break;
        case 'hr_infographics_panes-list':
          $form_state['pane']->cache = $cache;
          $form_state['pane']->cache['settings']['content_types'] = array('hr_infographic' => 'hr_infographic');
          break;
        case 'hr_news_panes-list':
          $form_state['pane']->cache = $cache;
          $form_state['pane']->cache['settings']['content_types'] = array('hr_news' => 'hr_news');
          break;
      }
    }
    elseif ($form_id == 'ctools_custom_content_type_edit_form') {
      $form_state['pane']->cache = array(
        'method' => 'simple',
        'settings' => array('lifetime' => '604800', 'granularity' => 'none'), // 1 week
      );
    }
    elseif ($form_id == 'ctools_bean_pane_content_type_form') {
      $form_state['pane']->cache = array(
        'method' => 'simple',
        'settings' => array('lifetime' => '86400', 'granularity' => 'none'), // 1 day
      );
    }
    elseif ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {
      $fpid = str_replace('fpid:', '', $form_state['pane']->subtype);
      $url = 'admin/structure/fieldable-panels-panes/view/'.$fpid;
      $form['advanced_settings'] = array(
        '#markup' => l(t('Advanced settings'), $url),
        '#weight' => 1,
      );
    }

    $form['uuid'] = array(
      '#markup' => '<strong>UUID:</strong>'.$form_state['pane']->uuid,
      '#weight' => 2,
    );
  }

  if (in_array($form_id, array('hr_document_node_form', 'hr_infographic_node_form', 'hr_event_node_form', 'hr_assessment_node_form', 'hr_operation_node_form', 'hr_bundle_node_form', 'hr_office_node_form'))) {
    $type = str_replace('_node_form', '', $form_id);
    $nid = $form_state['build_info']['args'][0]->nid;
    $link = 'https://app.humanitarianresponse.info/' . str_replace('hr_', '', $type) . 's/new';
    if ($nid) {
      $link = 'https://app.humanitarianresponse.info/' . str_replace('hr_', '', $type) . 's/' . $nid . '/edit';
    }
    drupal_set_message('To publish your content, try the new and improved forms ! Click <a href="' . $link . '" target="_blank">here</a> and login with your Humanitarian ID. For feedback send us an email: info@humanitarianresponse.info.');
  }
}

/**
 * Helper function for key documents block
 */
function _hr_layout_key_documents() {
  return array(
    'OCHA Core Products' => array(
      'Humanitarian Bulletin' => 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/humanitarian-bulletin',
      'Humanitarian Dashboard' => 'infographics/organizations/united-nations-office-coordination-humanitarian-affairs/infographic-type/humanitarian-dashboard',
      'Humanitarian Snapshot' => 'infographics/organizations/united-nations-office-coordination-humanitarian-affairs/infographic-type/humanitarian-snapshot',
      'Situation Report' => 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/situation-report',
    ),
    'HPC Products' => array(
      'Humanitarian Needs Overview' => 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/humanitarian-needs-overview',
      'Strategic Response Planning' => 'documents/organizations/united-nations-office-coordination-humanitarian-affairs/document-type/strategic-response-planning',
    ),
    'Field coordination' => array(
      '3W/4W' => 'infographics/infographic-type/3w',
      'Reference Maps' => 'infographics/infographic-type/reference-maps',
      'Thematic Maps' => 'infographics/infographic-type/thematic',
      'Meeting Minutes' => 'documents/document-type/meeting-minutes',
    ),
  );
}

/**
 * Finds out whether a menu item is present in a given tree.
 *
 * @param string $path
 *  Path to search for.
 * @param array $menu_tree
 *  Menu tree to search the path in.
 *
 * @return bool
 *  TRUE if found, FALSE if not found.
 */
function _hr_layout_menu_item_in_tree($path, $menu_tree) {
  foreach ($menu_tree as $menu_item) {
    if ($menu_item['link']['link_path'] == $path) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_layout_form_og_features_feature_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'hr_layout_form_og_features_feature_form_alter_submit';
}

/**
 * Submit handler to clear cache for group node.
 */
function hr_layout_form_og_features_feature_form_alter_submit(&$form, &$form_state) {
  if (isset($form['#ogf_entity_id'])) {
    node_load($form['#ogf_entity_id'], NULL, TRUE);
  }
}
