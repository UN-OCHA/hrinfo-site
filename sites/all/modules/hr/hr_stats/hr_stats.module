<?php
/**
 * @file
 * Code for the Statistics feature.
 */

include_once 'hr_stats.features.inc';

/**
 * Implements hook_permission().
 */
function hr_stats_permission() {
  return array(
    'access piwik reports' => array(
      'title' => t('Access piwik reports'),
      'description' => t('Allow access to Piwik reports.'),
    ),
    'administer piwik reports' => array(
      'title' => t('Administer Piwik reports'),
      'description' => t('Perfom basic configuration tasks for Piwik reports')
    ),
  );
}

/**
 * Implements hook_menu().
 */
function hr_stats_menu() {
  $items = array();

  $items['group/%/%/admin/analytics'] = array(
    'title' => 'Analytics',
    'page callback' => 'hr_stats_reports',
    'page arguments' => array(1, 2),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'description' => 'Reports on the Operation\'s visitors, popular pages and so much more ...',
  );
  $items['group/%/%/admin/analytics/visitors'] = array(
    'title' => 'Visitors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 1, 2 , 'visitors_overview'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['group/%/%/admin/analytics/visitors/overview'] = array(
    'title' => 'Overview',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 1, 2 , 'visitors_overview'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['group/%/%/admin/analytics/visitors/map'] = array(
    'title' => 'Map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 1, 2 , 'visitors_overview_map'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['group/%/%/admin/analytics/visitors/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 1, 2 , 'visitors_settings'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  // Admin configuration.
  $items['admin/config/system/hr-stats'] = array(
    'title' => 'Piwik reports for HumanitarianResponse',
    'description' => 'Administer Piwik reports for HumanitarianResponse configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_admin_settings_form'),
    'access arguments' => array('administer piwik reports'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function hr_stats_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'access piwik reports')) {
    $items['hr_analytics'] = array(
      'title' => t('Analytics'),
      'description' => t('Manage Operation Analytics'),
      'href' => 'admin/analytics/visitors',
    );
  }
  return $items;
}

/**
 * Implement hook_og_permission().
 */
function hr_stats_og_permission() {
  $items = array();

  $items['access piwik reports'] = array(
    'title' => t('Access Piwik reports'),
    'description' => t('Access Piwik reports for this group.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'restrict access' => TRUE,
  );

  return $items;
}

/**
 *  Implements hook_theme().
 */
function hr_stats_theme() {
  return array(
    'piwik_reports' => array(
      'template' => 'hr-stats',
      'variables' => array(
        'data_url' => NULL,
        'period' => NULL,
      ),
    ),
  );
}

/**
 *  Return the form that handles hr_stats configuration page.
 */
function hr_stats_admin_settings_form($form_state) {
  drupal_set_title(t('Piwik Reports'));

  $form['token_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Token auth & Segment'),
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#description' => t(
      'This is needed in order to acces piwik reports. Please consult your Piwik server administrator if you have a difficulty in finding it.'
    ),
  );
  $form['token_auth']['hr_stats_piwik_token_auth'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik Auth Token'),
    '#default_value' => variable_get('hr_stats_piwik_token_auth', ''),
    '#size' => 80,
    '#maxlength' => 255,
    '#weight' => 1,
    '#description' => t('Your piwik authentication code.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_token_info()
 * Adds a token for the space the current page belongs to. This token will be passed to Piwik to know which space a page belongs to
 */
function hr_stats_token_info() {
  $info['tokens']['node']['spaces'] = array(
    'name' => t('Spaces'),
    'description' => t('The spaces the node belongs to'),
  );
  $info['tokens']['node']['bundles'] = array(
    'name' => t('Bundles'),
    'description' => t('The bundles the node belongs to'),
  );
  return $info;
}

/**
* Implements hook_tokens().
*/
function hr_stats_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();
 if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'spaces':
          if (isset($node->{OG_AUDIENCE_FIELD}) && isset($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
            $spaces = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE];
            $space_ids = array();
            foreach ($spaces as $space) {
              $space_ids[] = $space['target_id'];
            }
            $replacements[$original] = implode(';', $space_ids);
          }
          else {
            if (og_is_group('node', $node->nid)) {
              $replacements[$original] = $node->nid;
            }
          }
          break;
        case 'bundles':
          if (isset($node->field_bundles) && isset($node->field_bundles[LANGUAGE_NONE])) {
            $bundles = $node->field_bundles[LANGUAGE_NONE];
            $bundle_ids = array();
            foreach ($bundles as $bundle) {
              $bundle_ids[] = $bundle['target_id'];
            }
            $replacements[$original] = implode(';', $bundle_ids);
          }
          else {
            if ($node->type == 'hr_bundle') {
              $replacements[$original] = $node->nid;
            }
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_js_alter().
 *
 * Remove bootstrap for this particular page of analytics to allow the stats
 * filter to work.
 */
function hr_stats_js_alter(&$javascript) {
  $path = current_path();
  $nid = arg(2);
  if (is_numeric($nid) && (stripos($path, "group/node/$nid/admin/analytics") !== FALSE)) {
    unset($javascript['http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js']);
    unset($javascript['https://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js']);
    unset($javascript['://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js']);
  }
}
