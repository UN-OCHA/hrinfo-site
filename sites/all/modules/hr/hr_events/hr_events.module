<?php
/**
 * @file
 * Code for the Events feature.
 */

include_once 'hr_events.features.inc';

define('HR_EVENTS_WKHTMLTOPDF', 'http://localhost:8441/htmltopdf');

function hr_events_wkhtmltopdf_url() {
  return variable_get('hr_events_wkhtmltopdf_url', HR_EVENTS_WKHTMLTOPDF);
}

/**
 * Implements hook_og_features_registry()
 */
function hr_events_og_features_registry() {
  $registry = array();
  $feature = new stdClass();
  $feature->id = 'hr_events';
  $feature->name = 'Events';
  $feature->description = t('Provide events to your space.');
  $feature->components = array(
    'node' => array(
      'hr_event',
    ),
  );
  $registry[$feature->id] = $feature;
  return $registry;
}

/**
 * Implements hook_views_query_alter()
 *
 * Makes the clusters/sectors filter of the calendar work
 * Makes the calendar view available to disasters
 * Related issue: https://www.drupal.org/node/2291619
 */
function hr_events_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_events_calendar') {
    $add_join = FALSE;
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Makes the calendar view available to disasters
        if ($condition['field'] == 'og_membership.gid = :og_membership_og_group_ref_target_id2 ' && $condition['operator'] == 'formula') {
          $nid = $condition['value'][':og_membership_og_group_ref_target_id2'];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $join = new views_join;
            $join->construct('field_data_field_disasters',
              'node',
              'nid',
              'entity_id'
            );
            $view->query->add_relationship('field_data_field_disasters', $join, 'node');
            $condition = array('field' => 'field_data_field_disasters.field_disasters_target_id', 'value' => $nid, 'operator' => '=');
          }
        }
        // If we are filtering the calendar by cluster/sector
        if ($condition['field'] == 'og_membership.gid' && $condition['operator'] == 'in') {
          $condition['field'] = 'og_membership2.gid';
          $add_join = TRUE;
        }
      }
    }
    // Then add a join to og_membership to the query
    if ($add_join) {
      $join = new views_join;
      $join->construct('og_membership',
          'node',  // left table
          'nid',   // left field
          'etid'   // field
      );
      $view->query->add_relationship('og_membership2',$join,'node');
    }
  }
}

/**
 * Implements hook_search_api_views_query_alter().
 *
 * Makes the events view available for disasters
 */
function hr_events_search_api_views_query_alter(&$view, &$query) {
  if ($view->name == 'hr_events') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (reset($condition) == 'og_group_ref') {
          $nid = $condition[1];
          $node = node_load($nid);
          if ($node->type == 'hr_disaster') {
            $condition = array('field_disasters', $nid, '=');
          }
          // Clusters as spaces
          // See http://atrium.humanitarianresponse.info/humanitarian_response/node/4363
          elseif ($node->type == 'hr_bundle') {
            $condition = array('field_bundles', $nid, '=');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function hr_events_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds PDF button to export events as PDF
 * See http://atrium.humanitarianresponse.info/humanitarian_response/node/4466
 */
function hr_events_views_pre_render(&$view) {
  if ($view->name == 'hr_events_calendar' && ($view->current_display == 'master' || $view->current_display == 'week' || $view->current_display == 'day')) {
    $params = array();
    foreach ($_GET as $key => $param) {
      if ($key != 'q') {
        $params[$key] = $param;
      }
    }
    $view->feed_icon .= '<li>'.l('PDF', str_replace('/events', '/events/pdf', current_path()), array('attributes' => array('target' => 'about:blank'), 'query' => $params)).'</li>';
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Shows the selected filters in the print display for PDF output
 */
function hr_events_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'hr_events_calendar' && ($display_id == 'print_master' || $display_id == 'print_week' || $display_id == 'print_day')) {
    $entity_types = array(
      'field_coordination_hubs_target_id_entityreference_filter' => 'node',
      'field_location_target_id_entityreference_filter' => 'taxonomy_term',
      'field_bundles_target_id_entityreference_filter' => 'node',
      'field_event_category_target_id_entityreference_filter' => 'taxonomy_term',
    );
    $header = '%2';
    $filters = $view->display_handler->get_option('filters');
    $i = 0;
    foreach ($filters as $key => $filter) {
      if (isset($filter['exposed']) && $filter['exposed'] == TRUE && isset($_GET[$key]) && $_GET[$key] != 'All') {
        if ($i == 0) {
          $header .= '<div class="filters">'.t('Filter criteria');
        }
        $entity = entity_load_single($entity_types[$key], $_GET[$key]);
        $header .= '<span class="filter">'.entity_label($entity_types[$key], $entity).'</span>';
        $i++;
      }
    }
    if ($i > 0) {
      $header .= '</div>';
    }
    $view->set_item_option($display_id, 'header', 'area', 'content', $header);
  }
}

/**
 * Implements hook_menu().
 *
 * Defines the menu callbacks necessary to print the events in PDF format
 * See http://atrium.humanitarianresponse.info/humanitarian_response/node/4466
 */
function hr_events_menu() {
  $items['node/%/events/pdf'] = array(
    'page callback' => 'hr_events_pdf_output',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

function hr_events_pdf_output($nid) {
  $current_params = array();
  foreach ($_GET as $key => $param) {
    if ($key != 'q') {
      $current_params[$key] = $param;
    }
  }

  $path = current_path();
  $node = entity_load_single('node', $nid);
  $label = entity_label('node', $node);
  $label = transliteration_clean_filename($label);
  $html_path = str_replace('/pdf', '/print', $path);
  // Determine period
  $period = 'month';
  if (strpos($path, 'week') !== FALSE) {
    $period = 'week';
  }
  elseif (strpos($path, 'day') !== FALSE) {
    $period = 'day';
  }
  $period = t($period);
  // Determine date
  $date = date('Y-m');
  $date_pos = strpos($path, '/20');
  if ($date_pos !== FALSE) {
    $date_part = substr($path, $date_pos + 1);
    $date_parts = explode('/', $date_part);
    $date = $date_parts[0];
  }
  else {
    if ($period == 'week' || $period == 'day') {
      $date = date('Y-m-d');
    }
  }
  // Print PDF using wkhtmltopdf service
  $html_url = url($html_path, array('absolute' => TRUE, 'query' => $current_params));
  $params = array(
    'url' => $html_url,
    'params' => array(
      'print-media-type' => 'true',
      'footer-left' => t('Page [page] of [topage]'),
      'footer-right' => t('Powered by HUMANITARIAN RESPONSE. Date of creation: [date]')."\nhttp://www.humanitarianresponse.info",
      'footer-font-name' => 'Exo 2',
      'footer-font-size' => '8',
      'footer-spacing' => '2',
    ),
  );

  $url = hr_events_wkhtmltopdf_url();
  $url .= '?' . http_build_query($params, NULL, '&');
  $req_params = array(
    'method' => 'POST',
  );
  drupal_add_http_header('Content-Type', 'application/pdf; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename="'.t('calendar').'-'.$label.'-'.$period.'-'.$date.'.pdf"');
  $output = chr_curl_http_request($url, $req_params);
  echo $output->data;
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function hr_events_form_hr_event_node_form_alter(&$form, &$form_state, $form_id) {
  _hr_core_fix_entity_reference_ajax_calls($form, $form_state);
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'hr_events') . '/js/hr_events.js',
  );

  // Show multiple empty ones for meeting minutes.
  if (!isset($form['#node']->nid)) {
    $items_count = 2;
    $field_name = 'field_event_meeting_minutes';
    _hr_document_render_multiple_input_lines($field_name, $items_count, $form, $form_state);
  }

  // Show multiple empty ones for agenda.
  if (!isset($form['#node']->nid)) {
    $items_count = 2;
    $field_name = 'field_event_agenda';
    _hr_document_render_multiple_input_lines($field_name, $items_count, $form, $form_state);
  }

  // Show multiple empty ones for contacts.
  if (!isset($form['#node']->nid)) {
    $items_count = 2;
    $field_name = 'field_hid_contact_ref';
    _hr_document_render_multiple_input_lines($field_name, $items_count, $form, $form_state);
  }

  // If it's a clone, validate the title.
  if (isset($form['clone_from_original_nid'])) {
    // Add title validation.
    if (!isset($form['#validate'])) {
      $form['#validate'] = array();
    }
    $form['#validate'][] = '_hr_document_check_clone_title';

    // Disable language changing.
    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
    $form['#after_build'][] = '_hr_document_clone_disable_language';
  }
}

/**
 * Implements hook_clone_node_alter.
 */
function hr_events_clone_node_alter(&$node, $context) {
  if ($node->type != 'hr_event') {
    return;
  }

  // Mark title field as clone.
  if (isset($node->title_field[$node->language][0]['value'])) {
    $node->title_field[$node->language][0]['value'] .= ' [CLONED]';
    $node->title_field[$node->language][0]['safe_value'] .= ' [CLONED]';
  }

  unset($node->field_event_date);
  unset($node->field_event_meeting_minutes);
  unset($node->field_event_agenda);
  unset($node->field_related_content);
}
