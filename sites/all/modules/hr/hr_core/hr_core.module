<?php
/**
 * @file
 * Code for the Core feature.
 */

define('HR_CORE_OG_AUDIENCE_FIELD', 'hr_core_gid');

include_once 'hr_core.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function hr_core_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
  $entity_info['field_collection_item']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
  $entity_info['fieldable_panels_pane']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['fieldable_panels_pane']['view modes']['link'] = array(
    'label' => t('Link'),
    'custom settings' => TRUE,
  );
  $entity_info['user']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Hides fields if they are empty
 */
function hr_core_form_alter(&$form, &$form_state, $form_id) {
  foreach ($form as $id => &$item) {
    if (is_array($item) && isset($item['#type']) && $item['#type'] == 'container') {
      switch ($item['#type']) {
        case 'container':
          $language = isset($item['#language']) ? $item['#language'] : LANGUAGE_NONE;
          if (isset($item[$language]['#type']) && $item[$language]['#type'] == 'select') {
            $diff = array_diff($item[$language]['#options'], array('_none' => '- None -'));
            if (empty($diff)) {
              $item['#type'] = 'hidden';
            }
          }
          break;
        case 'select':
          if (empty($item['#options'])) {
            $item['#type'] = 'hidden';
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function hr_core_pathauto_alias_alter(&$alias, array &$context) {
  // Force all aliases to be saved as language neutral.
  $context['language'] = LANGUAGE_NONE;
}

/**
 * Implements hook_path_insert().
 */
function hr_core_path_insert($path) {
  if ($path['language'] != LANGUAGE_NONE) {
    $initial_path = path_load(
      array('source' => $path['source'], 'language' => LANGUAGE_NONE)
    );
    if (!empty($initial_path)) {
      path_delete($path['pid']);
    }
    else {
      $path['language'] = LANGUAGE_NONE;
      // Resave path
      path_save($path);
    }
  }
}

/**
 * Implements hook_entity_presave()
 *
 * Makes sure pathauto is not used when no path is set
 */
function hr_core_entity_presave($node, $type) {
  if (!isset($node->path['pathauto'])) {
    $node->path['pathauto'] = FALSE;
  }
}

/**
 * Implements hook_field_extra_fields()
 */
function hr_core_field_extra_fields() {
  $content_types = array(
    'hr_document',
    'hr_infographic',
  );
  foreach ($content_types as $content_type) {
    $extra['node'][$content_type]['display'] = array(
      'hr_core_share_button' => array(
        'label' => t('Share button'),
        'description' => t('Share button'),
        'weight' => 0,
      ),
      'hr_core_read_more_button' => array(
        'label' => t('Read more button'),
        'description' => t('Read more button'),
        'weight' => 0,
      ),
      'hr_core_files_download_button' => array(
        'label' => t('Download button'),
        'description' => t('Download button'),
        'weight' => 0,
        'callback' => '_hr_core_files_download_button',
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function hr_core_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'node' && isset($entity->type)) {
    $extra_fields = field_info_extra_fields($type, $entity->type, 'display');
    $field_name = 'hr_core_files_download_button';
    if(!empty($extra_fields[$field_name]['display'][$view_mode]['visible'])) {
      $entity->content[$field_name] = array(
        '#type' => 'item',
        '#title' => '',
        '#markup' => _hr_core_files_download_button($entity, $type),
      );
    }
  }
}

/**
 * Render files as dropdown button.
 */
function _hr_core_files_download_button($entity, $type) {
  $output = '';

  $output .= '<div>';
  $output .= '<div class="btn-group">';
  $output .= '<button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown"><i class="fa fa-download"></i> download <span class="caret"></span></button>';
  $output .= '<ul class="dropdown-menu">';

  $language_list = _languagefield_options();
  $items = field_get_items($type, $entity, 'field_files_collection');

  if (empty($items) || !is_array($items)) {
    return;
  }

  foreach ($items as $delta => $item) {
    $fc = field_collection_item_revision_load($item['revision_id']);

    $file = field_get_items('field_collection_item', $fc, 'field_file');
    // Continue is the file no longer exists.
    if (!$file) {
      continue;
    }
    $file = reset($file);

    $language = field_get_items('field_collection_item', $fc, 'field_language');
    $file_language = '';
    if ($language) {
      $language = reset($language);
      $file_language = !empty($language['value']) ? '(' . $language_list[$language['value']]['name_native'] . ')' : '';
    }

    $file_title = $file['title'] ? $file['title'] : $file['filename'];
    $file_url = file_create_url($file['uri']);

    $output .= '<li>' . l($file_title . ' ' . $file_language, $file_url, array(
      'attributes' => array('target'=>'_blank')
    )) . '</li>';
  }

  $output .= '</ul>';
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_node_view().
 *
 * Adds share button
 */
function hr_core_node_view($node, $view_mode, $langcode) {
  $url = url('node/' . $node->nid, array('absolute' => TRUE));
  $node->content['hr_core_share_button'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => l(
      '<i class="fa fa-share"></i> ' . t('share'),
      'http://www.addtoany.com/share_save',
      array(
        'attributes' => array(
          'class' => array(
            'a2a_dd',
            'btn',
            'btn-secondary',
            'btn-sm'
          )
        ),
        'html' => TRUE
      )
    ),
    '#suffix' => '<script type="text/javascript">a2a_config.linkname = "' . $node->title . '";a2a_config.linkurl = "' . $url . '";a2a.init("page");</script>',
    '#attached' => array('js' => array('https://static.addtoany.com/menu/page.js')),
  );

  $node->content['hr_core_read_more_button'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => l(
      '<i class="fa fa-eye"></i> ' . t('read more'),
      'node/' . $node->nid,
      array(
        'attributes' => array(
          'class' => array(
            'btn',
            'btn-secondary',
            'btn-sm'
          )
        ),
        'html' => TRUE
      )
    ),
  );
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function hr_core_og_context_negotiation_info() {
  $providers = array();

  $providers['hr_core'] = array(
    'name' => t('HR Core'),
    'description' => t('Sets group context within space'),
    'callback' => 'hr_core_og_context_handler',
    'menu path' => array('node/%', 'group/%/%/admin'),
  );
  return $providers;
}

function hr_core_og_context_handler($node = NULL) {
  $context = NULL;
  if ($node == NULL) {
    $nid = arg(1);
    if (is_numeric($nid)) {
      $node = node_load($nid);
      if ($node) {
        $context = og_context_handler_node($node);
      }
    }
  }
  return $context;
}

/**
 * Implements hook_token_info()
 */
function hr_core_token_info() {
  $info['site']['og_context_current_group'] = array(
    'name' => t('Current group'),
    'description' => t('Current group from OG context'),
  );
  return $info;
}

/**
 * Implements hook_tokens()
 */
function hr_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'og_context_current_group':
          $group = og_context();
          if (isset($group['gid'])) {
            $node = node_load($group['gid']);
            $replacements[$original] = $node->title;
          }
          break;
      }
    }
  }
  return $replacements;
}

function _hr_core_draft_button($label) {
  return array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t($label),
    '#weight' => 6,
    '#submit' =>
      array(
        0 => 'node_form_submit',
      ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the node edit forms.
 */
function hr_core_form_node_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  if (isset($_GET[OG_AUDIENCE_FIELD])) {
    $node->{HR_CORE_OG_AUDIENCE_FIELD} = $_GET[OG_AUDIENCE_FIELD];
  }
  array_unshift($form['#validate'], 'hr_core_save_draft_validate');
  if (!variable_get('publishcontent_' . $node->type, FALSE)) {
    if (!isset($node->nid)) {
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
    }
    else {
      if ($node->status == 1) {
        $form['actions']['draft'] = _hr_core_draft_button('Unpublish');
      }
      else {
        $form['actions']['submit']['#value'] = t('Publish');
        $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
      }

    }
    return;
  }

  // Limit disasters/hubs to selected groups on node edit.
  if (isset($form['field_disasters']) || isset($form['field_coordination_hubs'])) {
    $groups = array();
    if (isset($form['#node']->og_group_ref) && isset($form['#node']->og_group_ref['und'])) {
      foreach ($form['#node']->og_group_ref['und'] as $group_ref) {
        $groups[] = $group_ref['target_id'];
      }
    }

    if (empty($groups)) {
      $group = og_context();
      if (!empty($group) ) {
        $groups = array($group['gid']);
      }
    }

    if (!empty($groups)) {
      if (isset($form['field_disasters'])) {
        $efq = new EntityFieldQuery();
        $results = $efq->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'hr_disaster')
          ->fieldCondition('og_group_ref', 'target_id', $groups, 'IN')
          ->execute();
        if (isset($results['node'])) {
          $options = array(
            '_none' => '- None -',
          );
          $disasters = entity_load('node', array_keys($results['node']));
          foreach ($disasters as $nid => $disaster) {
            $options[$nid] = $disaster->title;
          }
          asort($options);

          $form['field_disasters']['und']['#options'] = $options;
        }
      }

      if (isset($form['field_coordination_hubs'])) {
        $efq = new EntityFieldQuery();
        $results = $efq->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'hr_office')
          ->fieldCondition('og_group_ref', 'target_id', $groups, 'IN')
          ->execute();
        if (isset($results['node'])) {
          $options = array(
            '_none' => '- None -',
          );
          $offices = entity_load('node', array_keys($results['node']));
          foreach ($offices as $nid => $office) {
            $options[$nid] = $office->title;
          }
          asort($options);

          $form['field_coordination_hubs']['und']['#options'] = $options;
        }
      }
    }
  }

  if (publishcontent_publish_access($node)) {
    if (!isset($node->nid)) {
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
    }
  }
  else {
    if (isset($node->clone_from_original_nid)) {
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['draft'] = _hr_core_draft_button('Save As Draft');
    }
    else if (!isset($node->nid)) {
      $form['actions']['submit']['#value'] = t('Save As Draft');
    }
  }

  _hr_core_fix_entity_reference_ajax_calls($form, $form_state);
}

/**
 * Handles save draft form validation
 */
function hr_core_save_draft_validate($form, &$form_state) {
  // Set the node to be published or unpublished depending on which button was
  // clicked.
  if ($form_state['triggering_element']['#value'] == t('Save As Draft')
    || $form_state['triggering_element']['#value'] == t('Unpublish')) {
    $form_state['values']['status'] = 0;
  }
  elseif ($form_state['triggering_element']['#value'] == t('Publish')) {
    $form_state['values']['status'] = 1;
  }
}

/**
 * Implements hook_publishcontent_publish_access().
 */
function hr_core_publishcontent_publish_access($node, $account) {
  $access = FALSE;
  if (!isset($node->nid) && isset($node->{HR_CORE_OG_AUDIENCE_FIELD})) {
    $entity_type = 'node';
    $entity_id = $node->{HR_CORE_OG_AUDIENCE_FIELD};
    $access = og_user_access(
        $entity_type,
        $entity_id,
        'administer nodes',
        $account
      )
      || og_user_access(
        $entity_type,
        $entity_id,
        'publish any content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish own content',
          $account
        ) && $account->uid == $node->uid)
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish editable content',
          $account
        ) && node_access('update', $node))
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish own ' . check_plain($node->type) . ' content',
          $account
        ) && $account->uid == $node->uid)
      || og_user_access(
        $entity_type,
        $entity_id,
        'publish any ' . check_plain($node->type) . ' content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'publish editable ' . check_plain($node->type) . ' content',
          $account
        ) && node_access('update', $node));

    return $access ? PUBLISHCONTENT_ACCESS_ALLOW : PUBLISHCONTENT_ACCESS_IGNORE;
  }
  else {
    return PUBLISHCONTENT_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_publishcontent_unpublish_access().
 *
 */
function hr_core_publishcontent_unpublish_access($node, $account) {
  if (!isset($node->nid) && isset($node->{HR_CORE_OG_AUDIENCE_FIELD})) {
    $entity_type = 'node';
    $entity_id = $node->{HR_CORE_OG_AUDIENCE_FIELD};
    $access = og_user_access(
        $entity_type,
        $entity_id,
        'administer nodes',
        $account
      )
      || og_user_access(
        $entity_type,
        $entity_id,
        'unpublish any content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish own content',
          $account
        ) && $account->uid == $node->uid)
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish editable content',
          $account
        ) && node_access('update', $node))
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish own ' . check_plain($node->type) . ' content',
          $account
        ) && $account->uid == $node->uid)
      || og_user_access(
        $entity_type,
        $entity_id,
        'unpublish any ' . check_plain($node->type) . ' content',
        $account
      )
      || (og_user_access(
          $entity_type,
          $entity_id,
          'unpublish editable ' . check_plain($node->type) . ' content',
          $account
        ) && node_access('update', $node));
    return $access ? PUBLISHCONTENT_ACCESS_ALLOW : PUBLISHCONTENT_ACCESS_IGNORE;
  }
  else {
    return PUBLISHCONTENT_ACCESS_IGNORE;
  }
}

/**
 * Returns true if a menu item for a given path exists, false otherwise
 */
function hr_core_menu_link_exists($path, $menu_name) {
  $links = db_select('menu_links', 'ml')
    ->fields('ml')
    ->condition('ml.menu_name', $menu_name)
    ->condition('ml.link_path', $path)
    ->orderBy('weight')
    ->execute()
    ->fetchAll();

  return !empty($links);
}

/**
 * Implements hook_addressfield_default_values_alter()
 * Sets default country to the country of the space
 * See https://atrium.humanitarianresponse.info/humanitarian_response/node/4329
 */
function hr_core_addressfield_default_values_alter(&$default_values, $context) {
  if (empty($default_values['country'])) {
    $default_values['country'] = variable_get('site_default_country', 'SW');
  }
}

/**
 * Implements hook_languagefield_options_alter()
 * Added Dari as a language. See https://atrium.humanitarianresponse.info/humanitarian_response/node/4367
 */
function hr_core_languagefield_options_alter(&$languages, $subsets, $langcode) {
  if (!isset($languages['prs'])) {
    $languages['prs'] = array(
      'value' => 'prs',
      'langcode' => 'prs',
      'name' => 'Dari',
      'native' => 'دری',
      'name_native' => 'Dari (دری)',
    );
  }
}

/**
 * Implements hook_panels_new_pane_alter($pane)
 * Set default panel style to hr_highlighted
 */
function hr_core_panels_new_pane_alter(&$pane) {
  $pane->style['style'] = 'hr_highlighted';
}

/**
 * Redirect user to operation page after deletion of content
 * See http://atrium.humanitarianresponse.info/humanitarian_response/node/3992
 */
function hr_core_node_delete($node) {
  if (isset($node->{OG_AUDIENCE_FIELD})) {
    $nid = $node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id'];
    $_GET['destination'] = 'node/' . $nid;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_core_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  $form['buttons']['submit']['#submit'][] = 'hr_core_panels_ipe_clear_cache';
}

/**
 * Additional form callback that ensures that the panelizer page cache is
 * cleared.
 */
function hr_core_panels_ipe_clear_cache($form, &$form_state) {
  if (!empty($form_state['panelizer entity'])) {
    $entity = $form_state['panelizer entity'];
    $uri = entity_uri($entity->entity_type, $entity);
    // Clear all language cache.
    $uri['options']['language'] = '';
    if ($url = url($uri['path'], $uri['options'])) {
      // Manually delete the cache because the cid is a full url we don't know
      // how's going to be generated.
      // @See cache_clear_all().
      db_delete('cache_page')
        ->condition('cid', '%' . db_like($url) . '%', 'LIKE')
        ->execute();
    }

  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * Overrides the file.inc mapping to correctly set the allowed extensions for
 * files inside field collections.
 */
function hr_core_feeds_processor_targets_alter(array &$targets, $entity_type, $bundle) {
  if ($bundle == 'field_files_collection') {
    foreach ($targets as $target_id => &$target) {
      if ((isset($target['real_target'])) && $target['real_target'] == 'field_file') {
        if ($target_id == 'field_file:uri') {
          $target['callback'] = 'hr_core_file_feeds_set_target';
        }
      }
    }
  }
}

/**
 * Callback for mapping file fields inside field_collections.
 *
 * @see file_feeds_set_target()
 */
function hr_core_file_feeds_set_target(FeedsSource $source, $entity, $target, array $values) {
  // Add default of uri for backwards compatibility.
  list($field_name, $sub_field) = explode(':', $target . ':uri');
  $info = field_info_field($field_name);

  // We're acting for uris only.
  if ($sub_field != 'uri') {
    return;
  }

  foreach ($values as $k => $v) {
    if (!($v instanceof FeedsEnclosure)) {
      if (is_string($v)) {
        $values[$k] = new FeedsEnclosure($v, file_get_mimetype($v));
      }
      else {
        // Set the value for FALSE rather than remove it to keep our deltas
        // correct.
        $values[$k] = FALSE;
      }
    }
  }

  $entity_type = $entity->entityType();
  $bundle = $entity->bundle();
  $instance_info = field_info_instance($entity_type, $field_name, $bundle);

  // Determine file destination.
  // @todo This needs review and debugging.
  $data = array();
  if (!empty($entity->uid)) {
    $data[$entity_type] = $entity;
  }

  $destination = file_field_widget_uri($info, $instance_info, $data);


  // Populate entity.
  $field = isset($entity->$field_name) ? $entity->$field_name : array(LANGUAGE_NONE => array());
  $delta = 0;
  foreach ($values as $v) {
    if ($info['cardinality'] == $delta) {
      break;
    }

    if (!isset($field[LANGUAGE_NONE][$delta])) {
      $field[LANGUAGE_NONE][$delta] = array();
    }


    if ($v) {
      try {
        $v->setAllowedExtensions($instance_info['settings']['file_extensions']);
        $field[LANGUAGE_NONE][$delta] += (array) $v->getFile($destination);
        // @todo: Figure out how to properly populate this field.
        $field[LANGUAGE_NONE][$delta]['display'] = 1;
      }
      catch (Exception $e) {
        watchdog('feeds', check_plain($e->getMessage()));
      }
    }

    $delta++;
  }

  $entity->$field_name = $field;
}


/**
 * Implements hook_module_implements_alter().
 */
function hr_core_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'feeds_processor_targets_alter':
      // Move some of our hook implementations to the end of the list.
      $group = $implementations['hr_core'];
      unset($implementations['hr_core']);
      $implementations['hr_core'] = $group;
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function hr_core_menu_alter(&$items) {
  if (isset($items['node/%/group'])) {
    $items['node/%/group']['access callback'] = 'hr_core_group_tab_access';
  }
}

/**
 * Access callback override for the group tab.
 */
function hr_core_group_tab_access($entity_type, $etid) {
  $entity = entity_load_single($entity_type, $etid);
  if (!og_is_group($entity_type, $entity)) {
    return FALSE;
  }

  // Fallback to the original callback.
  return og_ui_get_group_admin($entity_type, $etid);
}

/**
 * Set caching of panel pane.
 */
function _hr_core_pane_cache_content_by_type($type, $subtype, $node_type, $minutes = 'none', $margin = 5) {
  $sql = "SELECT * FROM {panels_pane} WHERE type='$type'";
  if (!empty($subtype)) {
    $sql .= " AND subtype='$subtype'";
  }
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'hr_content',
      'settings' => array(
        'granularity' => array(
          'args' => 'args',
          'user_role' => 'user_role',
        ),
        'granularity_url' => 'base_url_system',
        'granularity_roles_as_anon' => array(),
        'granularity_role_selection' => 'all',
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'content_type' => $node_type,
      ),
    );

    db_update('panels_pane')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('pid', $obj->pid, '=')
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Set caching of panel pane.
 */
function _hr_core_pane_cache_simple($type, $subtype = '', $minutes = 15, $margin = 5) {
  $sql = "SELECT * FROM {panels_pane} WHERE type='$type'";
  if (!empty($subtype)) {
    $sql .= " AND subtype='$subtype'";
  }
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'simple',
      'settings' => array(
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'granularity' => 'context',
      ),
    );

    db_update('panels_pane')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('pid', $obj->pid, '=')
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Set caching of panel display.
 */
function _hr_core_display_cache_content($minutes = 'none', $margin = 5) {
  $sql = "SELECT * FROM {panels_display}";
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'hr_content',
      'settings' => array(
        'granularity' => array(
          'args' => 'args',
          'user_role' => 'user_role',
        ),
        'granularity_url' => 'base_url_system',
        'granularity_roles_as_anon' => array(),
        'granularity_role_selection' => 'all',
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'content_type' => 'hr_operation',
      ),
    );

    db_update('panels_display')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Set caching of panel display.
 */
function _hr_core_display_cache_content_defaults($minutes = 'none', $margin = 5, $content_type) {
  $sql = "SELECT * FROM {panels_display} WHERE storage_id LIKE 'node:$content_type%'";
  $result = db_query($sql);
  foreach ($result as $obj) {
    $cache_settings = array(
      'method' => 'hr_content',
      'settings' => array(
        'granularity' => array(
          'args' => 'args',
          'user_role' => 'user_role',
        ),
        'granularity_url' => 'base_url_system',
        'granularity_roles_as_anon' => array(),
        'granularity_role_selection' => 'all',
        'lifetime' => $minutes === 'none' ? $minutes : rand(60 * $minutes, 60 * ($minutes + $margin)),
        'content_type' => $content_type,
      ),
    );

    db_update('panels_display')
      ->fields(array('cache' => serialize($cache_settings)))
      ->condition('did', $obj->did, '=')
      ->execute();
  }
}

/**
 * Store initial form values when rendering for the first time.
 *
 * Needed to solve problems with entity reference and AJAX.
 */
function _hr_core_fix_entity_reference_ajax_calls(&$form, &$form_state) {
  $fields_to_save = array(
    'field_acc_geo_location_dest',
    'field_acc_impact_type',
    'field_bundles',
    'field_coordination_hubs',
    'field_disasters',
    'field_geographic_level',
    'field_organizations',
    'field_organizations2',
    'field_parent_cluster',
    'og_group_ref',
  );

  foreach ($fields_to_save as $field_to_save) {
    // Store the options.
    if (isset($form[$field_to_save])) {
      if (!isset($form_state['storage'][$field_to_save])) {
        $form_state['storage'][$field_to_save] = $form[$field_to_save];
      }
      // If it is set, re-fill it.
      else {
        if (isset($form_state['storage'][$field_to_save]) && empty($form[$field_to_save][LANGUAGE_NONE]['#default_value'])) {
          $form[$field_to_save] = $form_state['storage'][$field_to_save];
        }
      }
    }
  }
}
