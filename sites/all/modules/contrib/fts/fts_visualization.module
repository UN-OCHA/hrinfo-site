<?php

/**
 * @file
 * Provides integration between the FTS API and the Visualization module.
 */


/**
 * Implements hook_bean_types_api_info().
 */
function fts_visualization_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */

function fts_visualization_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'fts_visualization') . '/plugins/bean';
  $plugins['fts_visualization'] = array(
    'label' => t('FTS Funding Status (Visualization)'),
    'description' => t('Display Funding Status Charts using Visualization.'),
    'handler' => array(
      'class' => 'FTSVisualizationBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
  );
  return $plugins;
}

/**
 * Helper function: get appeal options
 */
function _fts_visualization_get_appeal_options() {
  $appeals = fts_get_appeals();
  $appeals_options = array();
  foreach ($appeals as $id => $appeal) {
    $appeals_options[$id] = $appeal->title;
  }
  return $appeals_options;
}

/**
 * Helper function: get global cluster options.
 */
function _fts_visualization_get_global_cluster_options() {
  $clusters = fts_get_global_clusters();
  $cluster_options = array();
  $cluster_options[''] = ' - None - ';
  foreach ($clusters as $cluster) {
    $cluster_options[$cluster->name] = $cluster->name;
  }
  return $cluster_options;
}

/**
 * Helper function
 */
function _fts_visualization_get_appeal_data($plan_id, $group_by = NULL) {
  if (is_numeric($plan_id)) {
    // Get plan.
    $appeal = fts_get_appeal($plan_id);
    $params = array(
      'planId' => $plan_id,
    );
    if ($group_by) {
      $params['groupby'] = $group_by;
    }

    // Get funding.
    $funding = fts_get_funding($params);
    $data['financed'] = (int) $funding->funding;
    $data['data'] = $funding->data;

    $data['total'] = (int) $appeal->revisedRequirements;
    $data['not_financed'] = $data['total'] - $data['financed'];
    if ((int) $data['total'] > 0) {
      $data['financed_percentage'] = round($data['financed'] / $data['total'] * 100);
    }
    else {
      $data['financed_percentage'] = 0;
    }
    $data['not_financed_percentage'] = 100 - $data['financed_percentage'];
    $data['label'] = $appeal->locations[0]->name;
  }
  return $data;
}

/**
 * Get data series
 */
function _fts_visualization_get_data($settings) {
  extract($settings);
  $series = array();
  $categories = array();
  $data = array();
  $fields = array(
    'label' => array(
      'label' => t('Label'),
      'enabled' => FALSE,
    ),
  );
  $total = NULL;
  if (count($appeals) == 1) {
    $appeal = array_shift($appeals);
    // Get latest FTS data
    $appeal_data = _fts_visualization_get_appeal_data($appeal, $groupby);
    $funding_data = array();
    if ($type == 'pie') {
      $fields['val'] = array(
        'label' => t('Value'),
        'enabled' => TRUE,
      );

      if (empty($groupby)) {
        $data = array(
          array('label' => 'Funded '. $appeal_data['financed_percentage']. '%', 'val' => $appeal_data['financed']),
          array('label' => 'Unmet Requirements ' . $appeal_data['not_financed_percentage'] . '%', 'val' => $appeal_data['not_financed']),
        );
      }
      else {
        $data = array();
        foreach ($appeal_data['data'] as $name => $total) {
          $data[] = array('label' => $name, 'val' => $total);
        }
        $data[] = array('label' => 'Unmet Requirements ' . $appeal_data['not_financed_percentage'] . '%', 'val' => $appeal_data['not_financed']);
      }
      // Calculate total.
      $total = $appeal_data['financed'] + $appeal_data['not_financed'];
    }
    else {
      if ($appeal_data['not_financed'] > 0) {
        $fields['not_financed'] = array(
          'label' => t('Unmet Requirements '.$appeal_data['not_financed_percentage']."%"),
          'enabled' => TRUE,
        );
      }
      $fields['financed'] = array(
        'label' => t('Funded '.$appeal_data['financed_percentage']."%"),
        'enabled' => TRUE,
      );

      $label = $appeal_data['label'];
      $data[$label] = $appeal_data;
    }
  }
  else {
    // Multiple appeals.
    $fields['not_financed'] = array(
      'label' => t('Unmet Requirements'),
      'enabled' => TRUE,
    );
    $fields['financed'] = array(
      'label' => t('Funded'),
      'enabled' => TRUE,
    );
    foreach ($appeals as $appeal) {
      $fdata = _fts_visualization_get_appeal_data($appeal);
      $label = $fdata['label'];
      $data[$label]['label'] = $label;
      $data[$label]['financed'] = $fdata['financed'];
      $data[$label]['not_financed'] = $fdata['not_financed'];
      $data[$label]['total'] = $fdata['total'];
    }
    uasort($data, "_fts_visualization_sort_data");
  }
  return array('fields' => $fields, 'data' => $data, 'total' => $total);
}

function fts_visualization_render_chart($settings) {
  $data = _fts_visualization_get_data($settings);
  $options = array();
  $options['title'] = '';
  if ($settings['type'] == 'bar' && count($data['fields']) > 2) {
    // Invert the field order to set the colors properly
    $fields = array('label' => $data['fields']['label'], 'financed' => $data['fields']['financed'], 'not_financed' => $data['fields']['not_financed']);
    $data['fields'] = $fields;
  }
  $options['fields'] = $data['fields'];
  $options['data'] = $data['data'];
  $options['type'] = $settings['type'];
  $options['xAxis'] = array('labelField' => 'label');
  $options['highcharts']['plotOptions']['series']['stacking'] = 'normal';
  $options['highcharts']['plotOptions']['series']['tooltip']['pointFormat'] = '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>';
  $options['highcharts']['plotOptions']['bar']['dataLabels']['enabled'] = FALSE;
  $options['highcharts']['plotOptions']['pie']['dataLabels']['enabled'] = FALSE;
  $options['highcharts']['plotOptions']['pie']['showInLegend'] = TRUE;
  $options['highcharts']['plotOptions']['pie']['cursor'] = 'pointer';

  if ($settings['type'] == 'table') {
    return fts_visualization_render_table($options);
  }
  else {
    $render = array();
    $render[] = array(
      '#theme' => 'visualization',
      '#options' => $options
    );
    if (!is_null($data['total'])) {
      $render[] = array(
        '#markup' => '<p class="fts_visualization_total"><span class="fts_visualization_total_label">Total</span>: <span class="fts_visualization_total_value">$ '.number_format($data['total']).'</span></p>',
      );
    }
    return $render;
  }
}

function fts_visualization_render_table($options) {
  $label_field = $options['xAxis']['labelField'];
  $headers = array();
  $headers[] = $options['fields'][$label_field]['label'];
  foreach ($options['fields'] as $name => $field) {
    if ($name != $label_field && $field['enabled']) {
      $headers[] = $field['label'];
    }
  }

  $rows = array();
  foreach ($options['data'] as $data) {
    $row = array();
    $row[] = $data[$label_field];
    foreach ($options['fields'] as $name => $field) {
      if ($name != $label_field && $field['enabled']) {
        if (is_numeric($data[$name])) {
          $row[] = number_format($data[$name]);
        }
        else {
          $row[] = $data[$name];
        }
      }
    }
    $rows[] = $row;
  }

  return array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
}

/**
 * Sort data
 */
function _fts_visualization_sort_data($a, $b)
{
	if ($a['total'] == $b['total'])
	{
		return 0;
	}
	return ($a['total'] < $b['total']) ? 1 : -1;
}
