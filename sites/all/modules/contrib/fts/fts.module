<?php

/**
 * @file
 * Provides an API to use the FTS API.
 */

/**
 *  FTS URL
 */
define('FTS_URL', 'https://ocha_hrinfo:edfgz345Hjk@api.hpc.tools/v1/public/');

/**
 * Returns API endpoint.
 */
function _fts_get_api_endpoint() {
  return variable_get('fts_api_endpoint', FTS_URL);
}

/**
 * Get all appeals for the current year.
 */
function fts_get_appeals($year = '') {
  if (empty($year)) {
    $year = date('Y');
  }

  $cache = cache_get('fts_appeals_cache' . $year, 'cache');
  if (!$cache) {
    $response = drupal_http_request(_fts_get_api_endpoint() . 'plan/year/' . $year);
    $data = json_decode($response->data);
    $appeals = array();
    if (isset($data->data)) {
      foreach ($data->data as $plan) {
        $appeal = (object) $plan;
        $appeal->title = $plan->name;
        $appeals[$plan->id] = $appeal;
      }
      cache_set('fts_appeals_cache' . $year, $appeals, 'cache', REQUEST_TIME + 24 * 60 * 60);
    }
  }
  else {
    $appeals = $cache->data;
  }

  return $appeals;
}

/**
 * Get appeal information by appeal ID
 */
function fts_get_appeal($id) {
  $appeal = NULL;
  if (empty($id)) {
    return $appeal;
  }

  $cache = cache_get('fts_appeal_by_id_cache' . $id, 'cache');
  if (!$cache) {
    $response = drupal_http_request(_fts_get_api_endpoint() . 'plan/id/' . $id);
    $data = json_decode($response->data);
    if (isset($data->data)) {
      $appeal = $data->data;
      $appeal->title = $appeal->name;

      $response = drupal_http_request(_fts_get_api_endpoint() . 'fts/flow?planId=' . $id);
      $data = json_decode($response->data);
      if (isset($data->data)) {
        $appeal->current_requirements = $data->data->incoming->fundingTotal;
        $appeal->funding = $data->data->incoming->pledgeTotal;
      }
      cache_set('fts_appeal_by_id_cache' . $id, $appeal, 'cache', REQUEST_TIME + 24 * 60 * 60);
    }
  }
  else {
    $appeal = $cache->data;
  }

  return $appeal;
}

/**
 * Get all countries
 */
function fts_get_countries() {
  // curl https://ocha_hrinfo:edfgz345Hjk@api.hpc.tools/v1/public/location?format=xml
  $cache = cache_get('fts_countries', 'cache');
  if(!$cache){
    $xml = simplexml_load_file(FTS_URL . 'Country.xml');
    $countries = array();
    if(isset($xml->Country)) {
      foreach ($xml->Country as $country) {
        $tmp = json_decode(json_encode($country));
        $countries[$tmp->iso_code_A] = $tmp;
      }
      cache_set('fts_countries', $countries, 'cache', REQUEST_TIME + 24*60*60);
    }
    return $countries;
  }
  else{
    return $cache->data;
  }
}

/**
 * Get country by ISO code
 */
function fts_get_country($iso3) {
  $countries = fts_get_countries();
  if (isset($countries[$iso3])) {
    return $countries[$iso3];
  }
  else {
    return NULL;
  }
}

/**
 * Get general funding information
 */
function fts_get_funding($params) {
    $id_string = 'params'. implode(',', $params);
    $md5_string = md5($id_string);
    $cache = cache_get('fts_funding'.$md5_string, 'cache');
    if(!$cache){
      $url = FTS_URL . 'funding.xml?'.http_build_query($params, '', '&');
      $xml = simplexml_load_file($url);
      $funding = json_decode(json_encode($xml));
      cache_set('fts_funding'.$md5_string, $funding, 'cache', REQUEST_TIME + 24*60*60);
      return $funding;
    }
    else{
      return $cache->data;
    }
}

/**
 * Get clusters information by appeal
 */
function fts_get_clusters_by_appeal($id) {
  if (empty($id)) {
    return array();
  }
  $cache = cache_get('clusters_by_appeal'.$id, 'cache');
  if(!$cache){
    $url = FTS_URL . 'cluster/appeal/'.$id.'.xml';
    $xml = simplexml_load_file($url);
    $clusters = array();
    if (isset($xml->Cluster)) {
      foreach ($xml->Cluster as $cluster) {
        $clusters[] = json_decode(json_encode($cluster));
      }
      cache_set('clusters_by_appeal'.$id, $clusters, 'cache', REQUEST_TIME + 24*60*60);
    }
    return $clusters;
  }
  else{
    return $cache->data;
  }
}

/**
 * Get information for a specific cluster within a specific appeal
 */
function fts_get_cluster_by_appeal($appeal, $cluster_name) {
  $clusters = fts_get_clusters_by_appeal($appeal);
  $cluster_found = NULL;
  foreach ($clusters as $cluster) {
    if ($cluster->name == $cluster_name) {
      $cluster_found = $cluster;
      break;
    }
  }
  return $cluster_found;
}
