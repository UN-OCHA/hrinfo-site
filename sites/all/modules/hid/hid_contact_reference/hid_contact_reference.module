<?php
/**
 * @file
 * Contact reference field module file.
 */

/**
 * Implements hook_field_info().
 */
function hid_contact_reference_field_info() {
  return array(
    'hid_contact_reference' => array(
      'label' => t('Contact reference'),
      'description' => t('This field stores the ID of a HID contact.'),
      'settings' => array('options_list_limit' => NULL),
      'instance_settings' => array(),
      'default_widget' => 'hid_contact_reference_autocomplete',
      'default_formatter' => 'hid_contact_reference_full',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function hid_contact_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Check if the contact exists in HID.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['cid'])) {
      if (!$contact = hid_profiles_get_contact($item['cid'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_contact_id',
          'message' => t(
            '%name: you have specified an invalid contact id for this reference field.',
            array('%name' => $instance['label'])
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function hid_contact_reference_field_is_empty($item, $field) {
  return empty($item['cid']);
}

/**
 * Implements hook_field_widget_info().
 */
function hid_contact_reference_field_widget_info() {
  $return = array();

  $return['hid_contact_reference_autocomplete'] = array(
    'label' => t('HID contact reference autocomplete'),
    'field types' => array('hid_contact_reference'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );

  return $return;
}

/**
 * Implements hook_field_widget_form().
 */
function hid_contact_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $default_value = '';
  if (!empty($items[$delta])) {
    if (variable_get('hid_profiles_v2', FALSE)) {
      $contact = hid_profiles_get_contact($items[$delta]['cid']);
      $default_value = $contact->name." [id: $contact->_id]";
    }
    else {
      if ($contact = hid_profiles_get_contact_by_id($items[$delta]['cid'])) {
        $location = !empty($contact->location) ? $contact->location : t(
          'Global profile'
        );
        $label = "$contact->nameGiven $contact->nameFamily ($location)";
        $default_value = "$label [id: $contact->_id]";
      }
    }
  }

  $element += array(
    '#type' => 'textfield',
    '#title' => t('Contact'),
    '#autocomplete_path' => 'hid/autocomplete/all',
    '#default_value' => $default_value,
    '#required' => $element['#required'],
  );

  $element['#element_validate'][] = 'hid_contact_reference_field_widget_validate';

  return array('cid' => $element);
}

/**
 * Validation callback to be able to translate the id.
 */
function hid_contact_reference_field_widget_validate($element, &$form_state) {
  $value = $element['#value'];
  if (!empty($value)) {
    if (preg_match('/\[id: (.+)\]/', $value, $matches)) {
      form_set_value($element, $matches[1], $form_state);
    }

  }
}

/**
 * Implements hook_field_formatter_info().
 */
function hid_contact_reference_field_formatter_info() {
  $return = array();

  $return['hid_contact_reference_full'] = array(
    'label' => t('Hid contact reference formatter'),
    'field types' => array('hid_contact_reference'),

  );

  return $return;
}

/**
 * Implements hook_ield_formatter_settings_summary().
 */
function hid_contact_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  return t('HID contact reference field');
}

/**
 * Implements hook_field_formatter_view().
 */
function hid_contact_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  $theme = 'hid_profiles_single_contact';
  if (variable_get('hid_profiles_v2', FALSE)) {
    $theme = 'hid_profiles_single_contact_v2';
  }
  $element = array();
  switch ($display['type']) {
    case 'hid_contact_reference_full':
      $wrapper = entity_metadata_wrapper($entity_type, $entity);
      foreach ($items as $delta => $item) {
        if ($contact = hid_profiles_get_contact($item['cid'])) {
          $element[$delta] = array(
            '#theme' => $theme,
            '#contact' => $contact,
            '#cache' => array(
              'keys' => array('hid_contact', $entity_type, $wrapper->getIdentifier(), $item['cid']),
              'bin' => 'cache',
              'expire' => time() + 3600,
              'granularity' => DRUPAL_CACHE_PER_PAGE,
            ),
          );
        }
      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_update().
 */
function hid_contact_reference_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Clear the render cache for the contact field.
  if ($field['type'] == 'hid_contact_reference') {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    cache_clear_all('hid_contact:' . $entity_type . ':' . $wrapper->getIdentifier() . ':', 'cache', TRUE);
  }
}
