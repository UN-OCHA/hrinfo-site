diff --git a/user_expire.admin.inc b/user_expire.admin.inc
index 5f0b215..580d9f9 100644
--- a/user_expire.admin.inc
+++ b/user_expire.admin.inc
@@ -90,6 +90,51 @@ function user_expire_settings($form, &$form_state) {
     );
   }
 
+  // Use the token list from user.module.
+  $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:last-login].');
+
+  $form['expiration_warning'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Expiry Warning Email'),
+    '#collapsible' => TRUE,
+    '#collapsed' => FALSE,
+    '#description' => t('Edit the warning e-mail messages sent before accounts are expired.') . ' ' . $email_token_help,
+    '#group' => 'email',
+  );
+  $form['expiration_warning']['user_expire_warning_subject'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Subject'),
+    '#default_value' => _user_expire_mail_text('warning_subject', NULL, array(), FALSE),
+    '#maxlength' => 180,
+  );
+  $form['expiration_warning']['user_expire_warning_body'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Body'),
+    '#default_value' => _user_expire_mail_text('warning_body', NULL, array(), FALSE),
+    '#rows' => 15,
+  );
+
+  $form['account_expired'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Expired Notification Email'),
+    '#collapsible' => TRUE,
+    '#collapsed' => FALSE,
+    '#description' => t('Edit the notification e-mail messages sent hwne accounts are expired.') . ' ' . $email_token_help,
+    '#group' => 'email',
+  );
+  $form['account_expired']['user_expire_expired_subject'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Subject'),
+    '#default_value' => _user_expire_mail_text('expired_subject', NULL, array(), FALSE),
+    '#maxlength' => 180,
+  );
+  $form['account_expired']['user_expire_expired_body'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Body'),
+    '#default_value' => _user_expire_mail_text('expired_body', NULL, array(), FALSE),
+    '#rows' => 15,
+  );
+
   $form['actions']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Save configuration'),
@@ -129,4 +174,15 @@ function user_expire_settings_submit($form, &$form_state) {
         ->execute();
     }
   }
+
+  // Save the email template settings.
+  $fields = array(
+    'user_expire_warning_subject',
+    'user_expire_warning_body',
+    'user_expire_expired_subject',
+    'user_expire_expired_body',
+  );
+  foreach ($fields as $field) {
+    variable_set($field, $form_state['values'][$field]);
+  }
 }
diff --git a/user_expire.module b/user_expire.module
index 4d01061..98b3f52 100644
--- a/user_expire.module
+++ b/user_expire.module
@@ -164,7 +164,7 @@ function user_expire_user_update(&$edit, $account, $category) {
 function _user_expire_save($account) {
   if (isset($account->user_expiration) && $account->user_expiration) {
     if (is_array($account->user_expiration_date) && isset($account->user_expiration_date['month'])) {
-      $time_for_datetime = $account->user_expiration_date['year'] . '-' . $account->user_expiration_date['month']  . '-' . $account->user_expiration_date['day'];
+      $time_for_datetime = $account->user_expiration_date['year'] . '-' . $account->user_expiration_date['month'] . '-' . $account->user_expiration_date['day'];
     }
     else {
       $time_for_datetime = $account->user_expiration_date;
@@ -254,7 +254,6 @@ function user_expire_set_expiration($account, $expiration = NULL) {
     if (!isset($account->is_new) || !$account->is_new) {
       // New accounts can't have a record to delete.
       // Existing records (!is_new) might.
-
       // Remove user expiration times for this user.
       $deleted = db_delete('user_expire')
         ->condition('uid', $account->uid)
@@ -463,39 +462,59 @@ function user_expire_get_role_rules() {
     ->execute()->fetchAllAssoc('rid');
 }
 
+/**
+ * Ensure we can fetch the customised mail strings (or defaults) via a single function.
+ */
+function _user_expire_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
+  if ($admin_setting = variable_get('user_expire_' . $key, FALSE)) {
+    // An admin setting overrides the default string.
+    $text = $admin_setting;
+  }
+  else {
+    // No override, return default string.
+    switch ($key) {
+      case 'warning_subject':
+        $text = t('[site:name]: Account expiration warning', array(), array('langcode' => $langcode));
+        break;
+      case 'warning_body':
+        $text = t("Hello [user:name]\n\nBecause you have not logged in recently, your account at [site:name] will be blocked in the near future. If you still use this site, please log in [site:login-url] to avoid having your account blocked.\n\nThanks, [site:name]", array(), array('langcode' => $langcode));
+        break;
+      case 'expired_subject':
+        $text = t('[site:name]: Account expired', array(), array('langcode' => $langcode));
+        break;
+      case 'expired_body':
+        $text = t("Hello [user:name]\n\nWe have written this email to inform you that your account at [site:name] is blocked.\n\nThanks, [site:name]", array(), array('langcode' => $langcode));
+        break;
+    }
+  }
+
+  if ($replace) {
+    // We do not sanitize the token replacement, since the output of this
+    // replacement is intended for an e-mail message, not a web browser.
+    return token_replace($text, $variables, array('language' => $language, 'callback' => 'user_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
+  }
+
+  return $text;
+}
+
 /**
  * Implements hook_mail().
  */
 function user_expire_mail($key, &$message, $params) {
-  if ($key == 'expiration_warning') {
-    // The subject.
-    $message['subject'] = t('@site_name: Account expiration warning', array('@site_name' => variable_get('site_name', 'Drupal.org')));
-    // The body.
-    $message['body'][] = t('Hello @user', array('@user' => format_username($params['account'])));
-    // An empty string gives a newline.
-    $message['body'][] = '';
-    $message['body'][] = t('Because you have not logged in recently, your account at @site_name will be blocked in the near future. If you still use this site, please log in @login_url to avoid having your account blocked.',
-      array(
-        '@site_name' => variable_get('site_name', 'Drupal.org'),
-        '@login_url' => url('user', array('absolute' => TRUE)),
-      )
-    );
-    $message['body'][] = '';
-    $message['body'][] = t('Thanks, @site_name', array('@site_name' => variable_get('site_name', 'Drupal.org')));
-  }
-  else if ($key == 'account_expired') {
-    // The subject.
-    $message['subject'] = t('@site_name: Account expired', array('@site_name' => variable_get('site_name', 'Drupal.org')));
-    // The body.
-    $message['body'][] = t('Hello @user', array('@user' => format_username($params['account'])));
-    // An empty string gives a newline.
-    $message['body'][] = '';
-    $message['body'][] = t('We have written this email to inform you that your account at @site_name is blocked.',
-      array(
-        '@site_name' => variable_get('site_name', 'Drupal.org'),
-      )
-    );
-    $message['body'][] = '';
-    $message['body'][] = t('Thanks, @site_name', array('@site_name' => variable_get('site_name', 'Drupal.org')));
+  $language = $message['language'];
+  $variables = array('user' => $params['account']);
+  $message['subject'] .= _user_expire_mail_text($key . '_subject', $language, $variables);
+  $message['body'][] = _user_expire_mail_text($key . '_body', $language, $variables);
+}
+
+/**
+ * Implements hook_user_presave().
+ *
+ * If the account was blocked but is now active, update the expiry so it is
+ * not re-blocked by the next cron run.
+ */
+function user_expire_user_presave(&$edit, $account, $category) {
+  if (!empty($account->original) && $account->original->status == 0 && $edit['status'] == 1) {
+    $edit['access'] = REQUEST_TIME;
   }
 }
diff --git a/user_expire.test b/user_expire.test
index cb9e3bd..3d955a9 100644
--- a/user_expire.test
+++ b/user_expire.test
@@ -4,6 +4,9 @@
  * Tests for User expire module.
  */
 
+/**
+ * {@inheritdoc}
+ */
 class UserExpireTestCase extends DrupalWebTestCase {
   /**
    * Implements getInfo().
@@ -17,6 +20,9 @@ class UserExpireTestCase extends DrupalWebTestCase {
     );
   }
 
+  /**
+   * {@inheritdoc}
+   */
   public function setUp() {
     // Enable User Expire module.
     parent::setUp('user_expire');
@@ -30,11 +36,14 @@ class UserExpireTestCase extends DrupalWebTestCase {
       'administer users',
       'set user expiration',
       'view expiring users report',
-      'administer user expire settings'
+      'administer user expire settings',
     ));
   }
 
-  function testUserExpire() {
+  /**
+   * Run all user_expire tests.
+   */
+  public function testUserExpire() {
     $this->assertTrue($this->basic_account->status, t('User account is currently enabled.'));
     user_expire_set_expiration($this->basic_account, REQUEST_TIME - 1);
     user_expire_expire_users(array($this->basic_account));
@@ -142,7 +151,7 @@ class UserExpireTestCase extends DrupalWebTestCase {
     user_expire_expire_by_role();
 
     // Ensure they are still enabled.
-    $this->drupalGet("user/$new_basic_account->uid/edit");
+    $this->drupalGet("user/{$new_basic_account->uid}/edit");
     $this->assertRaw('type="radio" id="edit-status-1" name="status" value="1" checked="checked" class="form-radio"', t('New user account stays active.'));
 
     // Age the new user's created by 90+ days.
@@ -151,9 +160,21 @@ class UserExpireTestCase extends DrupalWebTestCase {
     // Process it.
     user_expire_expire_by_role();
 
-    // Ensure they are disabled
-    $this->drupalGet("user/$new_basic_account->uid/edit");
+    // Ensure they are disabled.
+    $this->drupalGet("user/{$new_basic_account->uid}/edit");
     $this->assertRaw('type="radio" id="edit-status-0" name="status" value="0" checked="checked" class="form-radio"', t('User account is currently disabled.'));
 
+    // Manually unblock the user.
+    $edit = array();
+    $edit['status'] = 1;
+    $this->drupalPost("user/{$new_basic_account->uid}/edit", $edit, t('Save'));
+
+    // Process it.
+    user_expire_expire_by_role();
+
+    // Ensure they are still active.
+    $this->drupalGet("user/{$new_basic_account->uid}/edit");
+    $this->assertRaw('type="radio" id="edit-status-1" name="status" value="1" checked="checked" class="form-radio"', $this->t('User account is currently active.'));
   }
+
 }
